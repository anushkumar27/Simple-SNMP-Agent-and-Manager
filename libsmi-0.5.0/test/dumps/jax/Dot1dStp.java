/*
 * This Java file has been generated by smidump 0.5.0. Do not edit!
 * It is intended to be used within a Java AgentX sub-agent environment.
 *
 * $Id$
 */

/**
    This class represents a Java AgentX (JAX) implementation of
    the scalar group dot1dStp defined in BRIDGE-MIB.

    @version 1
    @author  smidump 0.5.0
    @see     AgentXGroup, AgentXScalars
 */

import java.util.Vector;
import java.util.Enumeration;
import jax.AgentXOID;
import jax.AgentXVarBind;
import jax.AgentXSetPhase;
import jax.AgentXResponsePDU;
import jax.AgentXScalars;

public class Dot1dStp extends AgentXScalars
{

    private final static long[] Dot1dStpOID = {1, 3, 6, 1, 2, 1, 17, 2};

    protected AgentXOID Dot1dStpProtocolSpecificationOID;
    protected final static long[] Dot1dStpProtocolSpecificationName = {1, 3, 6, 1, 2, 1, 17, 2, 1, 0};
    protected int dot1dStpProtocolSpecification = 0;
    protected AgentXOID Dot1dStpPriorityOID;
    protected final static long[] Dot1dStpPriorityName = {1, 3, 6, 1, 2, 1, 17, 2, 2, 0};
    protected int dot1dStpPriority = 0;
    protected int undo_dot1dStpPriority = 0;
    protected AgentXOID Dot1dStpTimeSinceTopologyChangeOID;
    protected final static long[] Dot1dStpTimeSinceTopologyChangeName = {1, 3, 6, 1, 2, 1, 17, 2, 3, 0};
    protected long dot1dStpTimeSinceTopologyChange = 0;
    protected AgentXOID Dot1dStpTopChangesOID;
    protected final static long[] Dot1dStpTopChangesName = {1, 3, 6, 1, 2, 1, 17, 2, 4, 0};
    protected long dot1dStpTopChanges = 0;
    protected AgentXOID Dot1dStpDesignatedRootOID;
    protected final static long[] Dot1dStpDesignatedRootName = {1, 3, 6, 1, 2, 1, 17, 2, 5, 0};
    protected byte[] dot1dStpDesignatedRoot = new byte[8];
    protected AgentXOID Dot1dStpRootCostOID;
    protected final static long[] Dot1dStpRootCostName = {1, 3, 6, 1, 2, 1, 17, 2, 6, 0};
    protected int dot1dStpRootCost = 0;
    protected AgentXOID Dot1dStpRootPortOID;
    protected final static long[] Dot1dStpRootPortName = {1, 3, 6, 1, 2, 1, 17, 2, 7, 0};
    protected int dot1dStpRootPort = 0;
    protected AgentXOID Dot1dStpMaxAgeOID;
    protected final static long[] Dot1dStpMaxAgeName = {1, 3, 6, 1, 2, 1, 17, 2, 8, 0};
    protected int dot1dStpMaxAge = 0;
    protected AgentXOID Dot1dStpHelloTimeOID;
    protected final static long[] Dot1dStpHelloTimeName = {1, 3, 6, 1, 2, 1, 17, 2, 9, 0};
    protected int dot1dStpHelloTime = 0;
    protected AgentXOID Dot1dStpHoldTimeOID;
    protected final static long[] Dot1dStpHoldTimeName = {1, 3, 6, 1, 2, 1, 17, 2, 10, 0};
    protected int dot1dStpHoldTime = 0;
    protected AgentXOID Dot1dStpForwardDelayOID;
    protected final static long[] Dot1dStpForwardDelayName = {1, 3, 6, 1, 2, 1, 17, 2, 11, 0};
    protected int dot1dStpForwardDelay = 0;
    protected AgentXOID Dot1dStpBridgeMaxAgeOID;
    protected final static long[] Dot1dStpBridgeMaxAgeName = {1, 3, 6, 1, 2, 1, 17, 2, 12, 0};
    protected int dot1dStpBridgeMaxAge = 0;
    protected int undo_dot1dStpBridgeMaxAge = 0;
    protected AgentXOID Dot1dStpBridgeHelloTimeOID;
    protected final static long[] Dot1dStpBridgeHelloTimeName = {1, 3, 6, 1, 2, 1, 17, 2, 13, 0};
    protected int dot1dStpBridgeHelloTime = 0;
    protected int undo_dot1dStpBridgeHelloTime = 0;
    protected AgentXOID Dot1dStpBridgeForwardDelayOID;
    protected final static long[] Dot1dStpBridgeForwardDelayName = {1, 3, 6, 1, 2, 1, 17, 2, 14, 0};
    protected int dot1dStpBridgeForwardDelay = 0;
    protected int undo_dot1dStpBridgeForwardDelay = 0;
    public Dot1dStp()
    {
        oid = new AgentXOID(Dot1dStpOID);
        data = new Vector();
        Dot1dStpProtocolSpecificationOID = new AgentXOID(Dot1dStpProtocolSpecificationName);
        data.addElement(Dot1dStpProtocolSpecificationOID);
        Dot1dStpPriorityOID = new AgentXOID(Dot1dStpPriorityName);
        data.addElement(Dot1dStpPriorityOID);
        Dot1dStpTimeSinceTopologyChangeOID = new AgentXOID(Dot1dStpTimeSinceTopologyChangeName);
        data.addElement(Dot1dStpTimeSinceTopologyChangeOID);
        Dot1dStpTopChangesOID = new AgentXOID(Dot1dStpTopChangesName);
        data.addElement(Dot1dStpTopChangesOID);
        Dot1dStpDesignatedRootOID = new AgentXOID(Dot1dStpDesignatedRootName);
        data.addElement(Dot1dStpDesignatedRootOID);
        Dot1dStpRootCostOID = new AgentXOID(Dot1dStpRootCostName);
        data.addElement(Dot1dStpRootCostOID);
        Dot1dStpRootPortOID = new AgentXOID(Dot1dStpRootPortName);
        data.addElement(Dot1dStpRootPortOID);
        Dot1dStpMaxAgeOID = new AgentXOID(Dot1dStpMaxAgeName);
        data.addElement(Dot1dStpMaxAgeOID);
        Dot1dStpHelloTimeOID = new AgentXOID(Dot1dStpHelloTimeName);
        data.addElement(Dot1dStpHelloTimeOID);
        Dot1dStpHoldTimeOID = new AgentXOID(Dot1dStpHoldTimeName);
        data.addElement(Dot1dStpHoldTimeOID);
        Dot1dStpForwardDelayOID = new AgentXOID(Dot1dStpForwardDelayName);
        data.addElement(Dot1dStpForwardDelayOID);
        Dot1dStpBridgeMaxAgeOID = new AgentXOID(Dot1dStpBridgeMaxAgeName);
        data.addElement(Dot1dStpBridgeMaxAgeOID);
        Dot1dStpBridgeHelloTimeOID = new AgentXOID(Dot1dStpBridgeHelloTimeName);
        data.addElement(Dot1dStpBridgeHelloTimeOID);
        Dot1dStpBridgeForwardDelayOID = new AgentXOID(Dot1dStpBridgeForwardDelayName);
        data.addElement(Dot1dStpBridgeForwardDelayOID);
    }

    public int get_dot1dStpProtocolSpecification()
    {
        return dot1dStpProtocolSpecification;
    }

    public int get_dot1dStpPriority()
    {
        return dot1dStpPriority;
    }

    public int set_dot1dStpPriority(AgentXSetPhase phase, int value)
    {
        switch (phase.getPhase()) {
        case AgentXSetPhase.TEST_SET:
            break;
        case AgentXSetPhase.COMMIT:
            undo_dot1dStpPriority = dot1dStpPriority;
            dot1dStpPriority = value;
            break;
        case AgentXSetPhase.UNDO:
            dot1dStpPriority = undo_dot1dStpPriority;
            break;
        case AgentXSetPhase.CLEANUP:
            break;
        default:
            return AgentXResponsePDU.PROCESSING_ERROR;
        }
        return AgentXResponsePDU.NO_ERROR;
    }
    public long get_dot1dStpTimeSinceTopologyChange()
    {
        return dot1dStpTimeSinceTopologyChange;
    }

    public long get_dot1dStpTopChanges()
    {
        return dot1dStpTopChanges;
    }

    public byte[] get_dot1dStpDesignatedRoot()
    {
        return dot1dStpDesignatedRoot;
    }

    public int get_dot1dStpRootCost()
    {
        return dot1dStpRootCost;
    }

    public int get_dot1dStpRootPort()
    {
        return dot1dStpRootPort;
    }

    public int get_dot1dStpMaxAge()
    {
        return dot1dStpMaxAge;
    }

    public int get_dot1dStpHelloTime()
    {
        return dot1dStpHelloTime;
    }

    public int get_dot1dStpHoldTime()
    {
        return dot1dStpHoldTime;
    }

    public int get_dot1dStpForwardDelay()
    {
        return dot1dStpForwardDelay;
    }

    public int get_dot1dStpBridgeMaxAge()
    {
        return dot1dStpBridgeMaxAge;
    }

    public int set_dot1dStpBridgeMaxAge(AgentXSetPhase phase, int value)
    {
        switch (phase.getPhase()) {
        case AgentXSetPhase.TEST_SET:
            break;
        case AgentXSetPhase.COMMIT:
            undo_dot1dStpBridgeMaxAge = dot1dStpBridgeMaxAge;
            dot1dStpBridgeMaxAge = value;
            break;
        case AgentXSetPhase.UNDO:
            dot1dStpBridgeMaxAge = undo_dot1dStpBridgeMaxAge;
            break;
        case AgentXSetPhase.CLEANUP:
            break;
        default:
            return AgentXResponsePDU.PROCESSING_ERROR;
        }
        return AgentXResponsePDU.NO_ERROR;
    }
    public int get_dot1dStpBridgeHelloTime()
    {
        return dot1dStpBridgeHelloTime;
    }

    public int set_dot1dStpBridgeHelloTime(AgentXSetPhase phase, int value)
    {
        switch (phase.getPhase()) {
        case AgentXSetPhase.TEST_SET:
            break;
        case AgentXSetPhase.COMMIT:
            undo_dot1dStpBridgeHelloTime = dot1dStpBridgeHelloTime;
            dot1dStpBridgeHelloTime = value;
            break;
        case AgentXSetPhase.UNDO:
            dot1dStpBridgeHelloTime = undo_dot1dStpBridgeHelloTime;
            break;
        case AgentXSetPhase.CLEANUP:
            break;
        default:
            return AgentXResponsePDU.PROCESSING_ERROR;
        }
        return AgentXResponsePDU.NO_ERROR;
    }
    public int get_dot1dStpBridgeForwardDelay()
    {
        return dot1dStpBridgeForwardDelay;
    }

    public int set_dot1dStpBridgeForwardDelay(AgentXSetPhase phase, int value)
    {
        switch (phase.getPhase()) {
        case AgentXSetPhase.TEST_SET:
            break;
        case AgentXSetPhase.COMMIT:
            undo_dot1dStpBridgeForwardDelay = dot1dStpBridgeForwardDelay;
            dot1dStpBridgeForwardDelay = value;
            break;
        case AgentXSetPhase.UNDO:
            dot1dStpBridgeForwardDelay = undo_dot1dStpBridgeForwardDelay;
            break;
        case AgentXSetPhase.CLEANUP:
            break;
        default:
            return AgentXResponsePDU.PROCESSING_ERROR;
        }
        return AgentXResponsePDU.NO_ERROR;
    }
    public AgentXVarBind getScalar(AgentXOID pos, AgentXOID oid)
    {
        if ((pos == null) || (pos.compareTo(oid) != 0))
            return new AgentXVarBind(oid, AgentXVarBind.NOSUCHOBJECT);
        else {
            if (pos == Dot1dStpProtocolSpecificationOID)
                return new AgentXVarBind(oid, AgentXVarBind.INTEGER, 
                                         get_dot1dStpProtocolSpecification());
            if (pos == Dot1dStpPriorityOID)
                return new AgentXVarBind(oid, AgentXVarBind.INTEGER, 
                                         get_dot1dStpPriority());
            if (pos == Dot1dStpTimeSinceTopologyChangeOID)
                return new AgentXVarBind(oid, AgentXVarBind.TIMETICKS, 
                                         get_dot1dStpTimeSinceTopologyChange());
            if (pos == Dot1dStpTopChangesOID)
                return new AgentXVarBind(oid, AgentXVarBind.COUNTER32, 
                                         get_dot1dStpTopChanges());
            if (pos == Dot1dStpDesignatedRootOID)
                return new AgentXVarBind(oid, AgentXVarBind.OCTETSTRING, 
                                         get_dot1dStpDesignatedRoot());
            if (pos == Dot1dStpRootCostOID)
                return new AgentXVarBind(oid, AgentXVarBind.INTEGER, 
                                         get_dot1dStpRootCost());
            if (pos == Dot1dStpRootPortOID)
                return new AgentXVarBind(oid, AgentXVarBind.INTEGER, 
                                         get_dot1dStpRootPort());
            if (pos == Dot1dStpMaxAgeOID)
                return new AgentXVarBind(oid, AgentXVarBind.INTEGER, 
                                         get_dot1dStpMaxAge());
            if (pos == Dot1dStpHelloTimeOID)
                return new AgentXVarBind(oid, AgentXVarBind.INTEGER, 
                                         get_dot1dStpHelloTime());
            if (pos == Dot1dStpHoldTimeOID)
                return new AgentXVarBind(oid, AgentXVarBind.INTEGER, 
                                         get_dot1dStpHoldTime());
            if (pos == Dot1dStpForwardDelayOID)
                return new AgentXVarBind(oid, AgentXVarBind.INTEGER, 
                                         get_dot1dStpForwardDelay());
            if (pos == Dot1dStpBridgeMaxAgeOID)
                return new AgentXVarBind(oid, AgentXVarBind.INTEGER, 
                                         get_dot1dStpBridgeMaxAge());
            if (pos == Dot1dStpBridgeHelloTimeOID)
                return new AgentXVarBind(oid, AgentXVarBind.INTEGER, 
                                         get_dot1dStpBridgeHelloTime());
            if (pos == Dot1dStpBridgeForwardDelayOID)
                return new AgentXVarBind(oid, AgentXVarBind.INTEGER, 
                                         get_dot1dStpBridgeForwardDelay());
        }
        return new AgentXVarBind(oid, AgentXVarBind.NOSUCHOBJECT);
    }

    public int setScalar(AgentXSetPhase phase, AgentXOID pos,
                         AgentXVarBind inVb)
    {
        if ((pos == null) || (pos.compareTo(inVb.getOID()) != 0))
            return AgentXResponsePDU.INCONSISTENT_NAME;
        else {
            if (pos == Dot1dStpPriorityOID)
                return set_dot1dStpPriority(phase, inVb.intValue());
            if (pos == Dot1dStpBridgeMaxAgeOID)
                return set_dot1dStpBridgeMaxAge(phase, inVb.intValue());
            if (pos == Dot1dStpBridgeHelloTimeOID)
                return set_dot1dStpBridgeHelloTime(phase, inVb.intValue());
            if (pos == Dot1dStpBridgeForwardDelayOID)
                return set_dot1dStpBridgeForwardDelay(phase, inVb.intValue());
        }
        return AgentXResponsePDU.NOT_WRITABLE;
    }

    public AgentXVarBind getNextScalar(AgentXOID pos, AgentXOID oid)
    {
        if ((pos == null) || (pos.compareTo(oid) <= 0))
            return new AgentXVarBind(oid, AgentXVarBind.ENDOFMIBVIEW);
        else {
            if (pos == Dot1dStpProtocolSpecificationOID)
                return new AgentXVarBind(pos, AgentXVarBind.INTEGER, 
                                         get_dot1dStpProtocolSpecification());
            if (pos == Dot1dStpPriorityOID)
                return new AgentXVarBind(pos, AgentXVarBind.INTEGER, 
                                         get_dot1dStpPriority());
            if (pos == Dot1dStpTimeSinceTopologyChangeOID)
                return new AgentXVarBind(pos, AgentXVarBind.TIMETICKS, 
                                         get_dot1dStpTimeSinceTopologyChange());
            if (pos == Dot1dStpTopChangesOID)
                return new AgentXVarBind(pos, AgentXVarBind.COUNTER32, 
                                         get_dot1dStpTopChanges());
            if (pos == Dot1dStpDesignatedRootOID)
                return new AgentXVarBind(pos, AgentXVarBind.OCTETSTRING, 
                                         get_dot1dStpDesignatedRoot());
            if (pos == Dot1dStpRootCostOID)
                return new AgentXVarBind(pos, AgentXVarBind.INTEGER, 
                                         get_dot1dStpRootCost());
            if (pos == Dot1dStpRootPortOID)
                return new AgentXVarBind(pos, AgentXVarBind.INTEGER, 
                                         get_dot1dStpRootPort());
            if (pos == Dot1dStpMaxAgeOID)
                return new AgentXVarBind(pos, AgentXVarBind.INTEGER, 
                                         get_dot1dStpMaxAge());
            if (pos == Dot1dStpHelloTimeOID)
                return new AgentXVarBind(pos, AgentXVarBind.INTEGER, 
                                         get_dot1dStpHelloTime());
            if (pos == Dot1dStpHoldTimeOID)
                return new AgentXVarBind(pos, AgentXVarBind.INTEGER, 
                                         get_dot1dStpHoldTime());
            if (pos == Dot1dStpForwardDelayOID)
                return new AgentXVarBind(pos, AgentXVarBind.INTEGER, 
                                         get_dot1dStpForwardDelay());
            if (pos == Dot1dStpBridgeMaxAgeOID)
                return new AgentXVarBind(pos, AgentXVarBind.INTEGER, 
                                         get_dot1dStpBridgeMaxAge());
            if (pos == Dot1dStpBridgeHelloTimeOID)
                return new AgentXVarBind(pos, AgentXVarBind.INTEGER, 
                                         get_dot1dStpBridgeHelloTime());
            if (pos == Dot1dStpBridgeForwardDelayOID)
                return new AgentXVarBind(pos, AgentXVarBind.INTEGER, 
                                         get_dot1dStpBridgeForwardDelay());
        }
        return new AgentXVarBind(pos, AgentXVarBind.ENDOFMIBVIEW);
    }

}

