/*
 * This YANG module has been generated by smidump 0.5.0:
 *
 *      smidump -f yang MAU-MIB
 *
 * Do not edit. Edit the source file instead!
 */

module MAU-MIB {

  namespace "urn:ietf:params:xml:ns:yang:smiv2:MAU-MIB";
  prefix "mau-mib";

  import IANA-MAU-MIB {
    prefix "iana-mau";
  }

  import IF-MIB {
    prefix "if-mib";
  }

  import SNMPv2-TC {
    prefix "snmpv2-tc";
  }

  import ietf-yang-smiv2 {
    prefix "smiv2";
  }

  import ietf-yang-types {
    prefix "yang";
  }

  organization
   "IETF Ethernet Interfaces and Hub MIB Working Group";

  contact
   "WG charter:
    http://www.ietf.org/html.charters/hubmib-charter.html
    
    Mailing Lists:
    General Discussion: hubmib@ietf.org
    To Subscribe: hubmib-request@ietf.org
    In Body: subscribe your_email_address
    
    
    
    Chair: Bert Wijnen
    Postal: Alcatel-Lucent
          Schagen 33
          3461 GL Linschoten
          Netherlands
    Phone: +31-348-407-775
    EMail: bwijnen@alcatel-lucent.com
    
    Editor: Edward Beili
    Postal: Actelis Networks Inc.
          25 Bazel St., P.O.B. 10173
          Petach-Tikva 10173
          Israel
     Tel: +972-3-924-3491
    EMail: edward.beili@actelis.com";

  description
   "Management information for 802.3 MAUs.
    
    The following reference is used throughout this MIB module:
    
    [IEEE802.3] refers to:
       IEEE Std 802.3, 2005 Edition: 'IEEE Standard for Information
       technology - Telecommunications and information exchange
       between systems - Local and metropolitan area networks -
       Specific requirements - Part 3: Carrier sense multiple
       access with collision detection (CSMA/CD) access method and
       physical layer specifications'.
    
       Of particular interest is Clause 30, 'Management'.
    
    Copyright (C) The IETF Trust (2007).
    This version of this MIB module is part of RFC 4836;
    see the RFC itself for full legal notices.";

  revision 2007-04-21 {
    description
     "Updated to reference IANA maintaned textual
      conventions for MAU types, Media Availability state,
      Auto Negotiation capabilities, and jack types,
      instead of using internally defined values.
      
      This version is published as RFC 4836.";
  }

  revision 2003-09-19 {
    description
     "Updated to include support for 10 Gb/s MAUs.
      This resulted in the following revisions:
      - Added OBJECT-IDENTITY definitions for
        10 gigabit MAU types
      
      
      
      - Added fiberLC jack type to JackType TC
      - Extended ifMauTypeListBits with bits for
        the 10 gigabit MAU types
      - Added enumerations to ifMauMediaAvailable,
        and updated its DESCRIPTION to reflect
        behaviour at 10 Gb/s
      - Added 64-bit version of ifMauFalseCarriers
        and added mauIfGrpHCStats object group to
        contain the new object
      - Deprecated mauModIfCompl2 and replaced it
        with mauModIfCompl3, which includes the new
        object group
      
       This version published as RFC 3636.";
  }

  revision 1999-08-24 {
    description
     "This version published as RFC 2668.  Updated
      to include support for 1000 Mb/sec
      MAUs and flow control negotiation.";
  }

  revision 1997-10-31 {
    description
     "Version published as RFC 2239.";
  }

  revision 1993-09-30 {
    description
     "Initial version, published as RFC 1515.";
  }

  typedef JackType {
    type enumeration {
      enum "other" {
        value "1";
      }
      enum "rj45" {
        value "2";
      }
      enum "rj45S" {
        value "3";
      }
      enum "db9" {
        value "4";
      }
      enum "bnc" {
        value "5";
      }
      enum "fAUI" {
        value "6";
      }
      enum "mAUI" {
        value "7";
      }
      enum "fiberSC" {
        value "8";
      }
      enum "fiberMIC" {
        value "9";
      }
      enum "fiberST" {
        value "10";
      }
      enum "telco" {
        value "11";
      }
      enum "mtrj" {
        value "12";
      }
      enum "hssdc" {
        value "13";
      }
      enum "fiberLC" {
        value "14";
      }
    }
    status deprecated;
    description
     "********* THIS TC IS DEPRECATED **********
      
      This TC has been deprecated in favour of
      IANAifJackType.
      
      Common enumeration values for repeater
      and interface MAU jack types.";
  }


  container MAU-MIB {
    config false;

    container rpMauTable {
      description
       "Table of descriptive and status information
        about the MAU(s) attached to the ports of a
        repeater.";
      smiv2:oid "1.3.6.1.2.1.26.1.1";

      list rpMauEntry {
        key "rpMauGroupIndex rpMauPortIndex rpMauIndex";
        description
         "An entry in the table, containing information
          about a single MAU.";
        smiv2:oid "1.3.6.1.2.1.26.1.1.1";

        leaf rpMauGroupIndex {
          type int32 {
            range "1..2147483647";
          }
          description
           "This variable uniquely identifies the group
            containing the port to which the MAU described
            by this entry is connected.
            
            Note:  In practice, a group will generally be
            a field-replaceable unit (i.e., module, card,
            or board) that can fit in the physical system
            enclosure, and the group number will correspond
            to a number marked on the physical enclosure.
            
            The group denoted by a particular value of this
            object is the same as the group denoted by the
            same value of rptrGroupIndex.";
          reference
           "RFC 2108, rptrGroupIndex.";
          smiv2:max-access "read-only";
          smiv2:oid "1.3.6.1.2.1.26.1.1.1.1";
        }

        leaf rpMauPortIndex {
          type int32 {
            range "1..2147483647";
          }
          description
           "This variable uniquely identifies the repeater
            port within group rpMauGroupIndex to which the
            MAU described by this entry is connected.";
          reference
           "RFC 2108, rptrPortIndex.";
          smiv2:max-access "read-only";
          smiv2:oid "1.3.6.1.2.1.26.1.1.1.2";
        }

        leaf rpMauIndex {
          type int32 {
            range "1..2147483647";
          }
          description
           "This variable uniquely identifies the MAU
            described by this entry from among other
            MAUs connected to the same port
            (rpMauPortIndex).";
          reference
           "[IEEE802.3], 30.5.1.1.1, aMAUID.";
          smiv2:max-access "read-only";
          smiv2:oid "1.3.6.1.2.1.26.1.1.1.3";
        }

        leaf rpMauType {
          type snmpv2-tc:AutonomousType;
          description
           "This object identifies the MAU type.  Values for
            standard IEEE 802.3 MAU types are defined in the
            IANA maintained IANA-MAU-MIB module, as
            OBJECT-IDENTITIES of dot3MauType.
            If the MAU type is unknown, the object identifier
            zeroDotZero is returned.";
          reference
           "[IEEE802.3], 30.5.1.1.2, aMAUType.";
          smiv2:max-access "read-only";
          smiv2:oid "1.3.6.1.2.1.26.1.1.1.4";
        }

        leaf rpMauStatus {
          type enumeration {
            enum "other" {
              value "1";
            }
            enum "unknown" {
              value "2";
            }
            enum "operational" {
              value "3";
            }
            enum "standby" {
              value "4";
            }
            enum "shutdown" {
              value "5";
            }
            enum "reset" {
              value "6";
            }
          }
          description
           "The current state of the MAU.  This object MAY
            be implemented as a read-only object by those
            agents and MAUs that do not implement software
            control of the MAU state.  Some agents may not
            support setting the value of this object to some
            of the enumerated values.
            
            The value other(1) is returned if the MAU is in
            a state other than one of the states 2 through
            6.
            
            
            
            The value unknown(2) is returned when the MAU's
            true state is unknown; for example, when it is
            being initialized.
            
            A MAU in the operational(3) state is fully
            functional; it operates, and passes signals to its
            attached DTE or repeater port in accordance to
            its specification.
            
            A MAU in standby(4) state forces DI and CI to
            idle, and the media transmitter to idle or fault,
            if supported.  Standby(4) mode only applies to
            link type MAUs.  The state of
            rpMauMediaAvailable is unaffected.
            
            A MAU in shutdown(5) state assumes the same
            condition on DI, CI, and the media transmitter,
            as though it were powered down or not connected.
            The MAU MAY return other(1) value for the
            rpMauJabberState and rpMauMediaAvailable objects
            when it is in this state.  For an AUI, this
            state will remove power from the AUI.
            
            Setting this variable to the value reset(6)
            resets the MAU in the same manner as a
            power-off, power-on cycle of at least one-half
            second would.  The agent is not required to
            return the value reset(6).
            
            Setting this variable to the value
            operational(3), standby(4), or shutdown(5)
            causes the MAU to assume the respective state,
            except that setting a mixing-type MAU or an AUI
            to standby(4) will cause the MAU to enter the
            shutdown state.";
          reference
           "[IEEE802.3], 30.5.1.1.7, aMAUAdminState,
            30.5.1.2.2, acMAUAdminControl, and 30.5.1.2.1,
            acResetMAU.";
          smiv2:max-access "read-write";
          smiv2:oid "1.3.6.1.2.1.26.1.1.1.5";
        }

        leaf rpMauMediaAvailable {
          type iana-mau:IANAifMauMediaAvailable;
          description
           "This object identifies Media Available state of
            the MAU, complementary to the rpMauStatus.  Values
            for the standard IEEE 802.3 Media Available states
            are defined in the IANA maintained IANA-MAU-MIB
            
            
            
            module, as IANAifMauMediaAvailable TC.";
          reference
           "[IEEE802.3], 30.5.1.1.4, aMediaAvailable.";
          smiv2:max-access "read-only";
          smiv2:oid "1.3.6.1.2.1.26.1.1.1.6";
        }

        leaf rpMauMediaAvailableStateExits {
          type yang:counter32;
          description
           "A count of the number of times that
            rpMauMediaAvailable for this MAU instance leaves
            the state available(3).
            
            Discontinuities in the value of this counter can
            occur at re-initialization of the management
            system and at other times, as indicated by the
            value of rptrMonitorPortLastChange.";
          reference
           "[IEEE802.3], 30.5.1.1.5, aLoseMediaCounter.
            RFC 2108, rptrMonitorPortLastChange";
          smiv2:max-access "read-only";
          smiv2:oid "1.3.6.1.2.1.26.1.1.1.7";
        }

        leaf rpMauJabberState {
          type enumeration {
            enum "other" {
              value "1";
            }
            enum "unknown" {
              value "2";
            }
            enum "noJabber" {
              value "3";
            }
            enum "jabbering" {
              value "4";
            }
          }
          description
           "The value other(1) is returned if the jabber
            state is not 2, 3, or 4.  The agent MUST always
            return other(1) for MAU type dot3MauTypeAUI.
            
            The value unknown(2) is returned when the MAU's
            true state is unknown; for example, when it is
            being initialized.
            
            If the MAU is not jabbering the agent returns
            noJabber(3).  This is the 'normal' state.
            
            If the MAU is in jabber state the agent returns
            the jabbering(4) value.";
          reference
           "[IEEE802.3], 30.5.1.1.6, aJabber.jabberFlag.";
          smiv2:max-access "read-only";
          smiv2:oid "1.3.6.1.2.1.26.1.1.1.8";
        }

        leaf rpMauJabberingStateEnters {
          type yang:counter32;
          description
           "A count of the number of times that
            mauJabberState for this MAU instance enters the
            state jabbering(4).  For MAUs of type
            dot3MauTypeAUI, dot3MauType100BaseT4,
            dot3MauType100BaseTX, dot3MauType100BaseFX, and
            all 1000Mbps types, this counter will always
            indicate zero.
            
            Discontinuities in the value of this counter can
            occur at re-initialization of the management
            system and at other times, as indicated by the
            value of rptrMonitorPortLastChange.";
          reference
           "[IEEE802.3], 30.5.1.1.6, aJabber.jabberCounter.
            RFC 2108, rptrMonitorPortLastChange";
          smiv2:max-access "read-only";
          smiv2:oid "1.3.6.1.2.1.26.1.1.1.9";
        }

        leaf rpMauFalseCarriers {
          type yang:counter32;
          description
           "A count of the number of false carrier events
            during IDLE in 100BASE-X links.  This counter
            does not increment at the symbol rate.  It can
            increment after a valid carrier completion at a
            maximum rate of once per 100 ms until the next
            carrier event.
            
            This counter increments only for MAUs of type
            dot3MauType100BaseT4, dot3MauType100BaseTX,
            dot3MauType100BaseFX, and all 1000Mbps types.
            
            For all other MAU types, this counter will
            always indicate zero.
            
            The approximate minimum time for rollover of
            this counter is 7.4 hours.
            
            Discontinuities in the value of this counter can
            occur at re-initialization of the management
            system and at other times, as indicated by the
            value of rptrMonitorPortLastChange.";
          reference
           "[IEEE802.3], 30.5.1.1.10, aFalseCarriers.
            RFC 2108, rptrMonitorPortLastChange";
          smiv2:max-access "read-only";
          smiv2:oid "1.3.6.1.2.1.26.1.1.1.10";
        }
      }
    }

    container rpJackTable {
      description
       "Information about the external jacks attached
        to MAUs attached to the ports of a repeater.";
      smiv2:oid "1.3.6.1.2.1.26.1.2";

      list rpJackEntry {
        key "rpMauGroupIndex rpMauPortIndex rpMauIndex rpJackIndex";
        description
         "An entry in the table, containing information
          about a particular jack.";
        smiv2:oid "1.3.6.1.2.1.26.1.2.1";

        leaf rpMauGroupIndex {
          type leafref {
            path "/mau-mib:MAU-MIB/mau-mib:rpMauTable/mau-mib:rpMauEntry/mau-mib:rpMauGroupIndex";
          }
        }

        leaf rpMauPortIndex {
          type leafref {
            path "/mau-mib:MAU-MIB/mau-mib:rpMauTable/mau-mib:rpMauEntry/mau-mib:rpMauPortIndex";
          }
        }

        leaf rpMauIndex {
          type leafref {
            path "/mau-mib:MAU-MIB/mau-mib:rpMauTable/mau-mib:rpMauEntry/mau-mib:rpMauIndex";
          }
        }

        leaf rpJackIndex {
          type int32 {
            range "1..2147483647";
          }
          description
           "This variable uniquely identifies the jack
            described by this entry from among other jacks
            attached to the same MAU (rpMauIndex).";
          smiv2:max-access "not-accessible";
          smiv2:oid "1.3.6.1.2.1.26.1.2.1.1";
        }

        leaf rpJackType {
          type iana-mau:IANAifJackType;
          description
           "The jack connector type, as it appears on the
            outside of the system.";
          smiv2:max-access "read-only";
          smiv2:oid "1.3.6.1.2.1.26.1.2.1.2";
        }
      }
    }

    container ifMauTable {
      description
       "Table of descriptive and status information
        about MAU(s) attached to an interface.";
      smiv2:oid "1.3.6.1.2.1.26.2.1";

      list ifMauEntry {
        key "ifMauIfIndex ifMauIndex";
        description
         "An entry in the table, containing information
          about a single MAU.";
        smiv2:oid "1.3.6.1.2.1.26.2.1.1";

        leaf ifMauIfIndex {
          type if-mib:InterfaceIndex;
          description
           "This variable uniquely identifies the interface
            to which the MAU described by this entry is
            connected.";
          reference
           "RFC 2863, ifIndex";
          smiv2:max-access "read-only";
          smiv2:oid "1.3.6.1.2.1.26.2.1.1.1";
        }

        leaf ifMauIndex {
          type int32 {
            range "1..2147483647";
          }
          description
           "This variable uniquely identifies the MAU
            described by this entry from among other MAUs
            connected to the same interface (ifMauIfIndex).";
          reference
           "[IEEE802.3], 30.5.1.1.1, aMAUID.";
          smiv2:max-access "read-only";
          smiv2:oid "1.3.6.1.2.1.26.2.1.1.2";
        }

        leaf ifMauType {
          type snmpv2-tc:AutonomousType;
          description
           "This object identifies the MAU type.  Values for
            standard IEEE 802.3 MAU types are defined in the
            IANA maintained IANA-MAU-MIB module, as
            OBJECT-IDENTITIES of dot3MauType.
            If the MAU type is unknown, the object identifier
            zeroDotZero is returned.
            
            This object represents the operational type of
            the MAU, as determined by either 1) the result
            of the auto-negotiation function or 2) if
            auto-negotiation is not enabled or is not
            implemented for this MAU, by the value of the
            object ifMauDefaultType.  In case 2), a set to
            the object ifMauDefaultType will force the MAU
            into the new operating mode.";
          reference
           "[IEEE802.3], 30.5.1.1.2, aMAUType.";
          smiv2:max-access "read-only";
          smiv2:oid "1.3.6.1.2.1.26.2.1.1.3";
        }

        leaf ifMauStatus {
          type enumeration {
            enum "other" {
              value "1";
            }
            enum "unknown" {
              value "2";
            }
            enum "operational" {
              value "3";
            }
            enum "standby" {
              value "4";
            }
            enum "shutdown" {
              value "5";
            }
            enum "reset" {
              value "6";
            }
          }
          description
           "The current state of the MAU.  This object MAY
            be implemented as a read-only object by those
            agents and MAUs that do not implement software
            control of the MAU state.  Some agents may not
            
            
            
            support setting the value of this object to some
            of the enumerated values.
            
            The value other(1) is returned if the MAU is in
            a state other than one of the states 2 through
            6.
            
            The value unknown(2) is returned when the MAU's
            true state is unknown; for example, when it is
            being initialized.
            
            A MAU in the operational(3) state is fully
            functional; it operates, and passes signals to its
            attached DTE or repeater port in accordance to
            its specification.
            
            A MAU in standby(4) state forces DI and CI to
            idle and the media transmitter to idle or fault,
            if supported.  Standby(4) mode only applies to
            link type MAUs.  The state of
            ifMauMediaAvailable is unaffected.
            
            A MAU in shutdown(5) state assumes the same
            condition on DI, CI, and the media transmitter,
            as though it were powered down or not connected.
            The MAU MAY return other(1) value for the
            ifMauJabberState and ifMauMediaAvailable objects
            when it is in this state.  For an AUI, this
            state will remove power from the AUI.
            
            Setting this variable to the value reset(6)
            resets the MAU in the same manner as a
            power-off, power-on cycle of at least one-half
            second would.  The agent is not required to
            return the value reset(6).
            
            Setting this variable to the value
            operational(3), standby(4), or shutdown(5)
            causes the MAU to assume the respective state,
            except that setting a mixing-type MAU or an AUI
            to standby(4) will cause the MAU to enter the
            shutdown state.";
          reference
           "[IEEE802.3], 30.5.1.1.7, aMAUAdminState,
            30.5.1.2.2, acMAUAdminControl, and 30.5.1.2.1,
            acResetMAU.";
          smiv2:max-access "read-write";
          smiv2:oid "1.3.6.1.2.1.26.2.1.1.4";
        }

        leaf ifMauMediaAvailable {
          type iana-mau:IANAifMauMediaAvailable;
          description
           "This object identifies Media Available state of
            the MAU, complementary to the ifMauStatus.  Values
            for the standard IEEE 802.3 Media Available states
            are defined in the IANA maintained IANA-MAU-MIB
            module, as IANAifMauMediaAvailable TC.";
          reference
           "[IEEE802.3], 30.5.1.1.4, aMediaAvailable.";
          smiv2:max-access "read-only";
          smiv2:oid "1.3.6.1.2.1.26.2.1.1.5";
        }

        leaf ifMauMediaAvailableStateExits {
          type yang:counter32;
          description
           "A count of the number of times that
            ifMauMediaAvailable for this MAU instance leaves
            the state available(3).
            
            Discontinuities in the value of this counter can
            occur at re-initialization of the management
            system and at other times, as indicated by the
            value of ifCounterDiscontinuityTime.";
          reference
           "[IEEE802.3], 30.5.1.1.5, aLoseMediaCounter.
            RFC 2863, ifCounterDiscontinuityTime.";
          smiv2:max-access "read-only";
          smiv2:oid "1.3.6.1.2.1.26.2.1.1.6";
        }

        leaf ifMauJabberState {
          type enumeration {
            enum "other" {
              value "1";
            }
            enum "unknown" {
              value "2";
            }
            enum "noJabber" {
              value "3";
            }
            enum "jabbering" {
              value "4";
            }
          }
          description
           "The value other(1) is returned if the jabber
            state is not 2, 3, or 4.  The agent MUST always
            return other(1) for MAU type dot3MauTypeAUI.
            
            The value unknown(2) is returned when the MAU's
            true state is unknown; for example, when it is
            being initialized.
            
            If the MAU is not jabbering the agent returns
            noJabber(3).  This is the 'normal' state.
            
            If the MAU is in jabber state the agent returns
            
            
            
            the jabbering(4) value.";
          reference
           "[IEEE802.3], 30.5.1.1.6, aJabber.jabberFlag.";
          smiv2:max-access "read-only";
          smiv2:oid "1.3.6.1.2.1.26.2.1.1.7";
        }

        leaf ifMauJabberingStateEnters {
          type yang:counter32;
          description
           "A count of the number of times that
            mauJabberState for this MAU instance enters the
            state jabbering(4).  This counter will always
            indicate zero for MAUs of type dot3MauTypeAUI
            and those of speeds above 10Mbps.
            
            Discontinuities in the value of this counter can
            occur at re-initialization of the management
            system and at other times, as indicated by the
            value of ifCounterDiscontinuityTime.";
          reference
           "[IEEE802.3], 30.5.1.1.6, aJabber.jabberCounter.
            RFC 2863, ifCounterDiscontinuityTime.";
          smiv2:max-access "read-only";
          smiv2:oid "1.3.6.1.2.1.26.2.1.1.8";
        }

        leaf ifMauFalseCarriers {
          type yang:counter32;
          description
           "A count of the number of false carrier events
            during IDLE in 100BASE-X and 1000BASE-X links.
            
            For all other MAU types, this counter will
            always indicate zero.  This counter does not
            increment at the symbol rate.
            
            It can increment after a valid carrier
            completion at a maximum rate of once per 100 ms
            for 100BASE-X and once per 10us for 1000BASE-X
            until the next CarrierEvent.
            
            This counter can roll over very quickly.  A
            management station is advised to poll the
            ifMauHCFalseCarriers instead of this counter in
            order to avoid loss of information.
            
            Discontinuities in the value of this counter can
            occur at re-initialization of the management
            system and at other times, as indicated by the
            value of ifCounterDiscontinuityTime.";
          reference
           "[IEEE802.3], 30.5.1.1.10, aFalseCarriers.
            
            
            
            RFC 2863, ifCounterDiscontinuityTime.";
          smiv2:max-access "read-only";
          smiv2:oid "1.3.6.1.2.1.26.2.1.1.9";
        }

        leaf ifMauTypeList {
          type int32;
          status deprecated;
          description
           "********* THIS OBJECT IS DEPRECATED **********
            
            This object has been deprecated in favour of
            ifMauTypeListBits.
            
            A value that uniquely identifies the set of
            possible IEEE 802.3 types that the MAU could be.
            The value is a sum that initially takes the
            value zero.  Then, for each type capability of
            this MAU, 2 raised to the power noted below is
            added to the sum.  For example, a MAU that has
            the capability to be only 10BASE-T would have a
            value of 512 (2**9).  In contrast, a MAU that
            supports both 10Base-T (full duplex) and
            100BASE-TX (full duplex) would have a value of
            ((2**11) + (2**16)), or 67584.
            
            The powers of 2 assigned to the capabilities are
            these:
            
            Power  Capability
              0      other or unknown
              1      AUI
              2      10BASE-5
              3      FOIRL
              4      10BASE-2
              5      10BASE-T duplex mode unknown
              6      10BASE-FP
              7      10BASE-FB
              8      10BASE-FL duplex mode unknown
              9      10BROAD36
             10      10BASE-T  half duplex mode
             11      10BASE-T  full duplex mode
             12      10BASE-FL half duplex mode
             13      10BASE-FL full duplex mode
             14      100BASE-T4
             15      100BASE-TX half duplex mode
             16      100BASE-TX full duplex mode
             17      100BASE-FX half duplex mode
             18      100BASE-FX full duplex mode
             19      100BASE-T2 half duplex mode
            
            
            
             20      100BASE-T2 full duplex mode
            
            If auto-negotiation is present on this MAU, this
            object will map to ifMauAutoNegCapability.";
          smiv2:max-access "read-only";
          smiv2:oid "1.3.6.1.2.1.26.2.1.1.10";
        }

        leaf ifMauDefaultType {
          type snmpv2-tc:AutonomousType;
          description
           "This object identifies the default
            administrative baseband MAU type to be used in
            conjunction with the operational MAU type
            denoted by ifMauType.
            
            The set of possible values for this object is
            the same as the set defined for the ifMauType
            object.
            
            This object represents the
            administratively-configured type of the MAU.  If
            auto-negotiation is not enabled or is not
            implemented for this MAU, the value of this
            object determines the operational type of the
            MAU.  In this case, a set to this object will
            force the MAU into the specified operating mode.
            
            If auto-negotiation is implemented and enabled
            for this MAU, the operational type of the MAU
            is determined by auto-negotiation, and the value
            of this object denotes the type to which the MAU
            will automatically revert if/when
            auto-negotiation is later disabled.
            
            NOTE TO IMPLEMENTORS:  It may be necessary to
            provide for underlying hardware implementations
            which do not follow the exact behavior specified
            above.  In particular, when
            ifMauAutoNegAdminStatus transitions from enabled
            to disabled, the agent implementation MUST
            ensure that the operational type of the MAU (as
            reported by ifMauType) correctly transitions to
            the value specified by this object, rather than
            continuing to operate at the value earlier
            determined by the auto-negotiation function.";
          reference
           "[IEEE802.3], 30.5.1.1.1, aMAUID, and 22.2.4.1.4.";
          smiv2:max-access "read-write";
          smiv2:oid "1.3.6.1.2.1.26.2.1.1.11";
        }

        leaf ifMauAutoNegSupported {
          type boolean;
          description
           "This object indicates whether or not
            auto-negotiation is supported on this MAU.";
          smiv2:max-access "read-only";
          smiv2:oid "1.3.6.1.2.1.26.2.1.1.12";
        }

        leaf ifMauTypeListBits {
          type iana-mau:IANAifMauTypeListBits;
          description
           "A value that uniquely identifies the set of
            possible IEEE 802.3 types that the MAU could be.
            If auto-negotiation is present on this MAU, this
            object will map to ifMauAutoNegCapabilityBits.
            
            Note that this MAU may be capable of operating
            as a MAU type that is beyond the scope of this
            MIB.  This is indicated by returning the
            bit value bOther in addition to any bit values
            for standard capabilities that are listed in the
            IANAifMauTypeListBits TC.";
          smiv2:max-access "read-only";
          smiv2:oid "1.3.6.1.2.1.26.2.1.1.13";
        }

        leaf ifMauHCFalseCarriers {
          type yang:counter64;
          description
           "A count of the number of false carrier events
            during IDLE in 100BASE-X and 1000BASE-X links.
            
            For all other MAU types, this counter will
            always indicate zero.  This counter does not
            increment at the symbol rate.
            
            This counter is a 64-bit version of
            ifMauFalseCarriers.  Since the 32-bit version of
            this counter can roll over very quickly,
            management stations are advised to poll the
            64-bit version instead, in order to avoid loss
            of information.
            
            Discontinuities in the value of this counter can
            occur at re-initialization of the management
            system and at other times, as indicated by the
            value of ifCounterDiscontinuityTime.";
          reference
           "[IEEE802.3], 30.5.1.1.10, aFalseCarriers.
            
            
            
            RFC 2863, ifCounterDiscontinuityTime.";
          smiv2:max-access "read-only";
          smiv2:oid "1.3.6.1.2.1.26.2.1.1.14";
        }
      }
    }

    container ifJackTable {
      description
       "Information about the external jacks attached
        to MAUs attached to an interface.";
      smiv2:oid "1.3.6.1.2.1.26.2.2";

      list ifJackEntry {
        key "ifMauIfIndex ifMauIndex ifJackIndex";
        description
         "An entry in the table, containing information
          about a particular jack.";
        smiv2:oid "1.3.6.1.2.1.26.2.2.1";

        leaf ifMauIfIndex {
          type leafref {
            path "/mau-mib:MAU-MIB/mau-mib:ifMauTable/mau-mib:ifMauEntry/mau-mib:ifMauIfIndex";
          }
        }

        leaf ifMauIndex {
          type leafref {
            path "/mau-mib:MAU-MIB/mau-mib:ifMauTable/mau-mib:ifMauEntry/mau-mib:ifMauIndex";
          }
        }

        leaf ifJackIndex {
          type int32 {
            range "1..2147483647";
          }
          description
           "This variable uniquely identifies the jack
            described by this entry from among other jacks
            attached to the same MAU.";
          smiv2:max-access "not-accessible";
          smiv2:oid "1.3.6.1.2.1.26.2.2.1.1";
        }

        leaf ifJackType {
          type iana-mau:IANAifJackType;
          description
           "The jack connector type, as it appears on the
            outside of the system.";
          smiv2:max-access "read-only";
          smiv2:oid "1.3.6.1.2.1.26.2.2.1.2";
        }
      }
    }

    container broadMauBasicTable {
      status deprecated;
      description
       "********* THIS OBJECT IS DEPRECATED **********
        
        This entire table has been deprecated.  There
        have been no reported implementations of this
        table, and it is unlikely that there ever will
        be.  IEEE recommends that broadband MAU types
        should not be used for new installations.
        
        Table of descriptive and status information
        
        
        
        about the broadband MAUs connected to
        interfaces.";
      smiv2:oid "1.3.6.1.2.1.26.3.1";

      list broadMauBasicEntry {
        key "broadMauIfIndex broadMauIndex";
        status deprecated;
        description
         "********* THIS OBJECT IS DEPRECATED **********
          
          An entry in the table, containing information
          about a single broadband MAU.";
        smiv2:oid "1.3.6.1.2.1.26.3.1.1";

        leaf broadMauIfIndex {
          type if-mib:InterfaceIndex;
          status deprecated;
          description
           "********* THIS OBJECT IS DEPRECATED **********
            
            This variable uniquely identifies the interface
            to which the MAU described by this entry is
            connected.";
          reference
           "RFC 2863, ifIndex.";
          smiv2:max-access "read-only";
          smiv2:oid "1.3.6.1.2.1.26.3.1.1.1";
        }

        leaf broadMauIndex {
          type int32 {
            range "1..2147483647";
          }
          status deprecated;
          description
           "********* THIS OBJECT IS DEPRECATED **********
            
            This variable uniquely identifies the MAU
            connected to interface broadMauIfIndex that is
            
            
            
            described by this entry.";
          reference
           "[IEEE802.3], 30.5.1.1.1, aMAUID.";
          smiv2:max-access "read-only";
          smiv2:oid "1.3.6.1.2.1.26.3.1.1.2";
        }

        leaf broadMauXmtRcvSplitType {
          type enumeration {
            enum "other" {
              value "1";
            }
            enum "single" {
              value "2";
            }
            enum "dual" {
              value "3";
            }
          }
          status deprecated;
          description
           "********* THIS OBJECT IS DEPRECATED **********
            
            This object indicates the type of frequency
            multiplexing/cabling system used to separate the
            transmit and receive paths for the 10BROAD36
            MAU.
            
            The value other(1) is returned if the split type
            is not either single or dual.
            
            The value single(2) indicates a single cable
            system.  The value dual(3) indicates a dual
            cable system, offset normally zero.";
          reference
           "[IEEE802.3], 30.5.1.1.8, aBbMAUXmitRcvSplitType.";
          smiv2:max-access "read-only";
          smiv2:oid "1.3.6.1.2.1.26.3.1.1.3";
        }

        leaf broadMauXmtCarrierFreq {
          type int32;
          status deprecated;
          description
           "********* THIS OBJECT IS DEPRECATED **********
            
            This variable indicates the transmit carrier
            frequency of the 10BROAD36 MAU in MHz/4; that
            is, in units of 250 kHz.";
          reference
           "[IEEE802.3], 30.5.1.1.9,
            aBroadbandFrequencies.xmitCarrierFrequency.";
          smiv2:max-access "read-only";
          smiv2:oid "1.3.6.1.2.1.26.3.1.1.4";
        }

        leaf broadMauTranslationFreq {
          type int32;
          status deprecated;
          description
           "********* THIS OBJECT IS DEPRECATED **********
            
            This variable indicates the translation offset
            
            
            
            frequency of the 10BROAD36 MAU in MHz/4; that
            is, in units of 250 kHz.";
          reference
           "[IEEE802.3], 30.5.1.1.9,
            aBroadbandFrequencies.translationFrequency.";
          smiv2:max-access "read-only";
          smiv2:oid "1.3.6.1.2.1.26.3.1.1.5";
        }
      }
    }

    container ifMauAutoNegTable {
      description
       "Configuration and status objects for the
        auto-negotiation function of MAUs attached to
        interfaces.
        
        The ifMauAutoNegTable applies to systems in
        which auto-negotiation is supported on one or
        more MAUs attached to interfaces.  Note that if
        auto-negotiation is present and enabled, the
        ifMauType object reflects the result of the
        auto-negotiation function.";
      smiv2:oid "1.3.6.1.2.1.26.5.1";

      list ifMauAutoNegEntry {
        key "ifMauIfIndex ifMauIndex";
        description
         "An entry in the table, containing configuration
          and status information for the auto-negotiation
          function of a particular MAU.";
        smiv2:oid "1.3.6.1.2.1.26.5.1.1";

        leaf ifMauIfIndex {
          type leafref {
            path "/mau-mib:MAU-MIB/mau-mib:ifMauTable/mau-mib:ifMauEntry/mau-mib:ifMauIfIndex";
          }
        }

        leaf ifMauIndex {
          type leafref {
            path "/mau-mib:MAU-MIB/mau-mib:ifMauTable/mau-mib:ifMauEntry/mau-mib:ifMauIndex";
          }
        }

        leaf ifMauAutoNegAdminStatus {
          type enumeration {
            enum "enabled" {
              value "1";
            }
            enum "disabled" {
              value "2";
            }
          }
          description
           "Setting this object to enabled(1) will cause
            the interface that has the auto-negotiation
            signaling ability to be enabled.
            
            If the value of this object is disabled(2) then
            the interface will act as it would if it had no
            auto-negotiation signaling.  Under these
            conditions, an IEEE 802.3 MAU will immediately
            be forced to the state indicated by the value of
            the object ifMauDefaultType.
            
            NOTE TO IMPLEMENTORS:  When
            ifMauAutoNegAdminStatus transitions from enabled
            to disabled, the agent implementation MUST
            ensure that the operational type of the MAU (as
            reported by ifMauType) correctly transitions to
            the value specified by the ifMauDefaultType
            object, rather than continuing to operate at the
            value earlier determined by the auto-negotiation
            function.";
          reference
           "[IEEE802.3], 30.6.1.1.2, aAutoNegAdminState,
            and 30.6.1.2.2, acAutoNegAdminControl.";
          smiv2:max-access "read-write";
          smiv2:oid "1.3.6.1.2.1.26.5.1.1.1";
        }

        leaf ifMauAutoNegRemoteSignaling {
          type enumeration {
            enum "detected" {
              value "1";
            }
            enum "notdetected" {
              value "2";
            }
          }
          description
           "A value indicating whether the remote end of
            the link is using auto-negotiation signaling.  It
            takes the value detected(1) if and only if,
            during the previous link negotiation, FLP Bursts
            were received.";
          reference
           "[IEEE802.3], 30.6.1.1.3,
            aAutoNegRemoteSignaling.";
          smiv2:max-access "read-only";
          smiv2:oid "1.3.6.1.2.1.26.5.1.1.2";
        }

        leaf ifMauAutoNegConfig {
          type enumeration {
            enum "other" {
              value "1";
            }
            enum "configuring" {
              value "2";
            }
            enum "complete" {
              value "3";
            }
            enum "disabled" {
              value "4";
            }
            enum "parallelDetectFail" {
              value "5";
            }
          }
          description
           "A value indicating the current status of the
            auto-negotiation process.  The enumeration
            parallelDetectFail(5) maps to a failure in
            parallel detection as defined in 28.2.3.1 of
            [IEEE802.3].";
          reference
           "[IEEE802.3], 30.6.1.1.4, aAutoNegAutoConfig.";
          smiv2:max-access "read-only";
          smiv2:oid "1.3.6.1.2.1.26.5.1.1.4";
        }

        leaf ifMauAutoNegCapability {
          type int32;
          status deprecated;
          description
           "********* THIS OBJECT IS DEPRECATED **********
            
            This object has been deprecated in favour of
            ifMauAutoNegCapabilityBits.
            
            A value that uniquely identifies the set of
            capabilities of the local auto-negotiation
            entity.  The value is a sum that initially
            takes the value zero.  Then, for each capability
            of this interface, 2 raised to the power noted
            below is added to the sum.  For example, an
            interface that has the capability to support
            only 100Base-TX half duplex would have a value
            of 32768 (2**15).  In contrast, an interface
            that supports both 100Base-TX half duplex and
            100Base-TX full duplex would have a value of
            98304 ((2**15) + (2**16)).
            
            The powers of 2 assigned to the capabilities are
            these:
            
            Power   Capability
              0       other or unknown
             (1-9)    (reserved)
             10       10BASE-T  half duplex mode
             11       10BASE-T  full duplex mode
             12       (reserved)
            
            
            
             13       (reserved)
             14       100BASE-T4
             15       100BASE-TX half duplex mode
             16       100BASE-TX full duplex mode
             17       (reserved)
             18       (reserved)
             19      100BASE-T2 half duplex mode
             20      100BASE-T2 full duplex mode
            
            Note that interfaces that support this MIB may
            have capabilities that extend beyond the scope
            of this MIB.";
          reference
           "[IEEE802.3], 30.6.1.1.5,
            aAutoNegLocalTechnologyAbility.";
          smiv2:max-access "read-only";
          smiv2:oid "1.3.6.1.2.1.26.5.1.1.5";
        }

        leaf ifMauAutoNegCapAdvertised {
          type int32;
          status deprecated;
          description
           "********* THIS OBJECT IS DEPRECATED **********
            
            This object has been deprecated in favour of
            ifMauAutoNegCapAdvertisedBits.
            
            A value that uniquely identifies the set of
            capabilities advertised by the local
            auto-negotiation entity. Refer to
            ifMauAutoNegCapability for a description of the
            possible values of this object.
            
            Capabilities in this object that are not
            available in ifMauAutoNegCapability cannot be
            enabled.";
          reference
           "[IEEE802.3], 30.6.1.1.6,
            aAutoNegAdvertisedTechnologyAbility.";
          smiv2:max-access "read-write";
          smiv2:oid "1.3.6.1.2.1.26.5.1.1.6";
        }

        leaf ifMauAutoNegCapReceived {
          type int32;
          status deprecated;
          description
           "********* THIS OBJECT IS DEPRECATED **********
            
            This object has been deprecated in favour of
            ifMauAutoNegCapReceivedBits.
            
            A value that uniquely identifies the set of
            
            
            
            capabilities received from the remote
            auto-negotiation entity. Refer to
            ifMauAutoNegCapability for a description of the
            possible values of this object.
            
            Note that interfaces that support this MIB may
            be attached to remote auto-negotiation entities
            that have capabilities beyond the scope of this
            MIB.";
          reference
           "[IEEE802.3], 30.6.1.1.7,
            aAutoNegReceivedTechnologyAbility.";
          smiv2:max-access "read-only";
          smiv2:oid "1.3.6.1.2.1.26.5.1.1.7";
        }

        leaf ifMauAutoNegRestart {
          type enumeration {
            enum "restart" {
              value "1";
            }
            enum "norestart" {
              value "2";
            }
          }
          description
           "If the value of this object is set to
            restart(1) then this will force auto-negotiation
            to begin link renegotiation.  If auto-negotiation
            signaling is disabled, a write to this object
            has no effect.
            Setting the value of this object to norestart(2)
            has no effect.";
          reference
           "[IEEE802.3], 30.6.1.2.1,
            acAutoNegRestartAutoConfig.";
          smiv2:max-access "read-write";
          smiv2:oid "1.3.6.1.2.1.26.5.1.1.8";
        }

        leaf ifMauAutoNegCapabilityBits {
          type iana-mau:IANAifMauAutoNegCapBits;
          description
           "A value that uniquely identifies the set of
            capabilities of the local auto-negotiation
            entity.  Note that interfaces that support this
            MIB may have capabilities that extend beyond the
            scope of this MIB.
            
            Note that the local auto-negotiation entity may
            support some capabilities beyond the scope of
            this MIB.  This is indicated by returning the
            bit value bOther in addition to any bit values
            for standard capabilities that are listed in the
            IANAifMauAutoNegCapBits TC.";
          reference
           "[IEEE802.3], 30.6.1.1.5,
            aAutoNegLocalTechnologyAbility.";
          smiv2:max-access "read-only";
          smiv2:oid "1.3.6.1.2.1.26.5.1.1.9";
        }

        leaf ifMauAutoNegCapAdvertisedBits {
          type iana-mau:IANAifMauAutoNegCapBits;
          description
           "A value that uniquely identifies the set of
            capabilities advertised by the local
            auto-negotiation entity.
            
            Capabilities in this object that are not
            available in ifMauAutoNegCapabilityBits cannot
            be enabled.
            
            Note that the local auto-negotiation entity may
            advertise some capabilities beyond the scope of
            this MIB.  This is indicated by returning the
            bit value bOther in addition to any bit values
            for standard capabilities that are listed in the
            IANAifMauAutoNegCapBits TC.";
          reference
           "[IEEE802.3], 30.6.1.1.6,
            aAutoNegAdvertisedTechnologyAbility.";
          smiv2:max-access "read-write";
          smiv2:oid "1.3.6.1.2.1.26.5.1.1.10";
        }

        leaf ifMauAutoNegCapReceivedBits {
          type iana-mau:IANAifMauAutoNegCapBits;
          description
           "A value that uniquely identifies the set of
            capabilities received from the remote
            auto-negotiation entity.
            Note that interfaces that support this MIB may
            be attached to remote auto-negotiation entities
            that have capabilities beyond the scope of this
            MIB.  This is indicated by returning the bit
            value bOther in addition to any bit values for
            standard capabilities that are listed in the
            IANAifMauAutoNegCapBits TC.";
          reference
           "[IEEE802.3], 30.6.1.1.7,
            aAutoNegReceivedTechnologyAbility.";
          smiv2:max-access "read-only";
          smiv2:oid "1.3.6.1.2.1.26.5.1.1.11";
        }

        leaf ifMauAutoNegRemoteFaultAdvertised {
          type enumeration {
            enum "noError" {
              value "1";
            }
            enum "offline" {
              value "2";
            }
            enum "linkFailure" {
              value "3";
            }
            enum "autoNegError" {
              value "4";
            }
          }
          description
           "A value that identifies any local fault
            indications that this MAU has detected and will
            advertise at the next auto-negotiation
            interaction for 1000Mbps MAUs.";
          reference
           "[IEEE802.3], 30.6.1.1.6,
            aAutoNegAdvertisedTechnologyAbility.";
          smiv2:max-access "read-write";
          smiv2:oid "1.3.6.1.2.1.26.5.1.1.12";
        }

        leaf ifMauAutoNegRemoteFaultReceived {
          type enumeration {
            enum "noError" {
              value "1";
            }
            enum "offline" {
              value "2";
            }
            enum "linkFailure" {
              value "3";
            }
            enum "autoNegError" {
              value "4";
            }
          }
          description
           "A value that identifies any fault indications
            received from the far end of a link by the
            local auto-negotiation entity for 1000Mbps
            MAUs.";
          reference
           "[IEEE802.3], 30.6.1.1.7,
            aAutoNegReceivedTechnologyAbility.";
          smiv2:max-access "read-only";
          smiv2:oid "1.3.6.1.2.1.26.5.1.1.13";
        }
      }
    }
  }

  notification rpMauJabberTrap {
    description
     "This trap is sent whenever a managed repeater
      MAU enters the jabber state.
      
      The agent MUST throttle the generation of
      consecutive rpMauJabberTraps so that there is at
      least a five-second gap between them.";
    reference
     "[IEEE802.3], 30.5.1.3.1, nJabber notification.";
    smiv2:oid "1.3.6.1.2.1.26.0.1";

    container object-1 {

      leaf rpMauGroupIndex {
        type leafref {
          path "/mau-mib:MAU-MIB/mau-mib:rpMauTable/mau-mib:rpMauEntry/mau-mib:rpMauGroupIndex";
        }
      }

      leaf rpMauPortIndex {
        type leafref {
          path "/mau-mib:MAU-MIB/mau-mib:rpMauTable/mau-mib:rpMauEntry/mau-mib:rpMauPortIndex";
        }
      }

      leaf rpMauIndex {
        type leafref {
          path "/mau-mib:MAU-MIB/mau-mib:rpMauTable/mau-mib:rpMauEntry/mau-mib:rpMauIndex";
        }
      }

      leaf rpMauJabberState {
        type leafref {
          path "/mau-mib:MAU-MIB/mau-mib:rpMauTable/mau-mib:rpMauEntry/mau-mib:rpMauJabberState";
        }
      }
    }
  }

  notification ifMauJabberTrap {
    description
     "This trap is sent whenever a managed interface
      MAU enters the jabber state.
      
      The agent MUST throttle the generation of
      consecutive ifMauJabberTraps so that there is at
      least a five-second gap between them.";
    reference
     "[IEEE802.3], 30.5.1.3.1, nJabber notification.";
    smiv2:oid "1.3.6.1.2.1.26.0.2";

    container object-1 {

      leaf ifMauIfIndex {
        type leafref {
          path "/mau-mib:MAU-MIB/mau-mib:ifMauTable/mau-mib:ifMauEntry/mau-mib:ifMauIfIndex";
        }
      }

      leaf ifMauIndex {
        type leafref {
          path "/mau-mib:MAU-MIB/mau-mib:ifMauTable/mau-mib:ifMauEntry/mau-mib:ifMauIndex";
        }
      }

      leaf ifMauJabberState {
        type leafref {
          path "/mau-mib:MAU-MIB/mau-mib:ifMauTable/mau-mib:ifMauEntry/mau-mib:ifMauJabberState";
        }
      }
    }
  }

  smiv2:alias "snmpDot3MauMgt" {
    smiv2:oid "1.3.6.1.2.1.26";
  }

  smiv2:alias "snmpDot3MauTraps" {
    smiv2:oid "1.3.6.1.2.1.26.0";
  }

  smiv2:alias "dot3RpMauBasicGroup" {
    smiv2:oid "1.3.6.1.2.1.26.1";
  }

  smiv2:alias "dot3IfMauBasicGroup" {
    smiv2:oid "1.3.6.1.2.1.26.2";
  }

  smiv2:alias "dot3BroadMauBasicGroup" {
    smiv2:oid "1.3.6.1.2.1.26.3";
  }

  smiv2:alias "dot3IfMauAutoNegGroup" {
    smiv2:oid "1.3.6.1.2.1.26.5";
  }

  smiv2:alias "mauMod" {
    smiv2:oid "1.3.6.1.2.1.26.6";
  }

  smiv2:alias "mauModConf" {
    smiv2:oid "1.3.6.1.2.1.26.6.1";
  }

  smiv2:alias "mauModCompls" {
    smiv2:oid "1.3.6.1.2.1.26.6.1.1";
  }

  smiv2:alias "mauModObjGrps" {
    smiv2:oid "1.3.6.1.2.1.26.6.1.2";
  }

  smiv2:alias "mauModNotGrps" {
    smiv2:oid "1.3.6.1.2.1.26.6.1.3";
  }

}
