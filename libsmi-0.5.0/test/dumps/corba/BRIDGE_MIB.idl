/*							-- DO NOT EDIT --
 * This IDL file has been generated by smidump version 0.5.0:
 *   smidump -f corba BRIDGE-MIB
 *
 * Derived from BRIDGE-MIB:
 *   The Bridge MIB module for managing devices that support
 *   IEEE 802.1D.
 *   
 *   Copyright (C) The Internet Society (2005).  This version of
 *   this MIB module is part of RFC 4188; see the RFC itself for
 *   full legal notices.
 *
 * Revision 2005-09-19 00:00:
 *   Third revision, published as part of RFC 4188.
 *   
 *   The MIB module has been converted to SMIv2 format.
 *   Conformance statements have been added and some
 *   description and reference clauses have been updated.
 *   
 *   The object dot1dStpPortPathCost32 was added to
 *   support IEEE 802.1t and the permissible values of
 *   dot1dStpPriority and dot1dStpPortPriority have been
 *   clarified for bridges supporting IEEE 802.1t or
 *   IEEE 802.1w.
 *   
 *   The interpretation of dot1dStpTimeSinceTopologyChange
 *   has been clarified for bridges supporting the Rapid
 *   Spanning Tree Protocol (RSTP).
 *
 * Revision 1993-07-31 00:00:
 *   Second revision, published as part of RFC 1493.
 *
 * Revision 1991-12-31 00:00:
 *   Initial revision, published as part of RFC 1286.
 *
 * $Id$
 */

#ifndef _BRIDGE_MIB_IDL_
#define _BRIDGE_MIB_IDL_

#include <ASN1Types.idl>
#include <SNMPMgmt.idl>
#include <IF_MIB.idl>
#include <SNMPv2_SMI.idl>
#include <SNMPv2_TC.idl>

module BRIDGE_MIB {

    typedef IF_MIB::InterfaceIndexType InterfaceIndexType;
    typedef SNMPv2_SMI::Counter32Type Counter32Type;
    typedef SNMPv2_SMI::Integer32Type Integer32Type;
    typedef SNMPv2_SMI::TimeTicksType TimeTicksType;
    typedef SNMPv2_TC::MacAddressType MacAddressType;

    const string moduleIdentity = "dot1dBridge";
    const ASN1_ObjectIdentifier dot1dBridge = "::BRIDGE_MIB::dot1dBridge";

    /*
             The Bridge MIB module for managing devices that support
             IEEE 802.1D.
             
             Copyright (C) The Internet Society (2005).  This version of
             this MIB module is part of RFC 4188; see the RFC itself for
             full legal notices.

    LAST-UPDATED:   200509190000Z

    ORGANIZATION:
            "IETF Bridge MIB Working Group"

    CONTACT-INFO:
            "Email: bridge-mib@ietf.org
             
             K.C. Norseth (Editor)
             L-3 Communications
             Tel: +1 801-594-2809
             Email: kenyon.c.norseth@L-3com.com
             Postal: 640 N. 2200 West.
             Salt Lake City, Utah 84116-0850
             
             
             
             
             Les Bell (Editor)
             3Com Europe Limited
             Phone: +44 1442 438025
             Email: elbell@ntlworld.com
             Postal: 3Com Centre, Boundary Way
             Hemel Hempstead
             Herts.  HP2 7YU
             UK
             
             Send comments to <bridge-mib@ietf.org>"

    REVISION:       "200509190000Z"
    REVISION-DESCRIPTION:
            "Third revision, published as part of RFC 4188.
             
             The MIB module has been converted to SMIv2 format.
             Conformance statements have been added and some
             description and reference clauses have been updated.
             
             The object dot1dStpPortPathCost32 was added to
             support IEEE 802.1t and the permissible values of
             dot1dStpPriority and dot1dStpPortPriority have been
             clarified for bridges supporting IEEE 802.1t or
             IEEE 802.1w.
             
             The interpretation of dot1dStpTimeSinceTopologyChange
             has been clarified for bridges supporting the Rapid
             Spanning Tree Protocol (RSTP)."

    REVISION:       "199307310000Z"
    REVISION-DESCRIPTION:
            "Second revision, published as part of RFC 1493."

    REVISION:       "199112310000Z"
    REVISION-DESCRIPTION:
            "Initial revision, published as part of RFC 1286."

    */

    /*
             The Bridge-Identifier, as used in the Spanning Tree
             Protocol, to uniquely identify a bridge.  Its first two
             octets (in network byte order) contain a priority value,
             and its last 6 octets contain the MAC address used to
             refer to a bridge in a unique fashion (typically, the
             numerically smallest MAC address of all ports on the
             bridge).
    */
    typedef ASN1_OctetString BridgeIdType; 

    /*
             A Spanning Tree Protocol (STP) timer in units of 1/100
             seconds.  Several objects in this MIB module represent
             values of timers used by the Spanning Tree Protocol.
             In this MIB, these timers have values in units of
             hundredths of a second (i.e., 1/100 secs).
             
             These timers, when stored in a Spanning Tree Protocol's
             BPDU, are in units of 1/256 seconds.  Note, however, that
             802.1D-1998 specifies a settable granularity of no more
             than one second for these timers.  To avoid ambiguity,
             a conversion algorithm is defined below for converting
             between the different units, which ensures a timer's
             value is not distorted by multiple conversions.
             
             To convert a Timeout value into a value in units of
             1/256 seconds, the following algorithm should be used:
             
                 b = floor( (n * 256) / 100)
             
             where:
                 floor   =  quotient [ignore remainder]
                 n is the value in 1/100 second units
                 b is the value in 1/256 second units
             
             To convert the value from 1/256 second units back to
             1/100 seconds, the following algorithm should be used:
             
                 n = ceiling( (b * 100) / 256)
             
             where:
                 ceiling = quotient [if remainder is 0], or
                           quotient + 1 [if remainder is nonzero]
                 n is the value in 1/100 second units
             
             
             
                 b is the value in 1/256 second units
             
             Note: it is important that the arithmetic operations are
             done in the order specified (i.e., multiply first,
             divide second).
    DISPLAY-HINT: d


    */
    typedef ASN1_Integer TimeoutType; 

    typedef ASN1_Integer Dot1dBaseTypeType; 
    const Dot1dBaseTypeType Dot1dBaseTypeType_unknown = 1;
    const Dot1dBaseTypeType Dot1dBaseTypeType_transparent_only = 2;
    const Dot1dBaseTypeType Dot1dBaseTypeType_sourceroute_only = 3;
    const Dot1dBaseTypeType Dot1dBaseTypeType_srt = 4;
    const string Dot1dBaseTypeType_NameNumberList = "unknown (1) , transparent_only (2) , sourceroute_only (3) , srt (4)";

    typedef ASN1_Integer Dot1dBasePortType; 

    typedef ASN1_Integer Dot1dStpProtocolSpecificationType; 
    const Dot1dStpProtocolSpecificationType Dot1dStpProtocolSpecificationType_unknown = 1;
    const Dot1dStpProtocolSpecificationType Dot1dStpProtocolSpecificationType_decLb100 = 2;
    const Dot1dStpProtocolSpecificationType Dot1dStpProtocolSpecificationType_ieee8021d = 3;
    const string Dot1dStpProtocolSpecificationType_NameNumberList = "unknown (1) , decLb100 (2) , ieee8021d (3)";

    typedef ASN1_Integer Dot1dStpPriorityType; 

    typedef ASN1_Integer Dot1dStpBridgeMaxAgeType; 

    typedef ASN1_Integer Dot1dStpBridgeHelloTimeType; 

    typedef ASN1_Integer Dot1dStpBridgeForwardDelayType; 

    typedef ASN1_Integer Dot1dStpPortType; 

    typedef ASN1_Integer Dot1dStpPortPriorityType; 

    typedef ASN1_Integer Dot1dStpPortStateType; 
    const Dot1dStpPortStateType Dot1dStpPortStateType_disabled = 1;
    const Dot1dStpPortStateType Dot1dStpPortStateType_blocking = 2;
    const Dot1dStpPortStateType Dot1dStpPortStateType_listening = 3;
    const Dot1dStpPortStateType Dot1dStpPortStateType_learning = 4;
    const Dot1dStpPortStateType Dot1dStpPortStateType_forwarding = 5;
    const Dot1dStpPortStateType Dot1dStpPortStateType_broken = 6;
    const string Dot1dStpPortStateType_NameNumberList = "disabled (1) , blocking (2) , listening (3) , learning (4) , forwarding (5) , broken (6)";

    typedef ASN1_Integer Dot1dStpPortEnableType; 
    const Dot1dStpPortEnableType Dot1dStpPortEnableType_enabled = 1;
    const Dot1dStpPortEnableType Dot1dStpPortEnableType_disabled = 2;
    const string Dot1dStpPortEnableType_NameNumberList = "enabled (1) , disabled (2)";

    typedef ASN1_Integer Dot1dStpPortPathCostType; 

    typedef ASN1_OctetString Dot1dStpPortDesignatedPortType; 

    typedef ASN1_Integer Dot1dStpPortPathCost32Type; 

    typedef ASN1_Integer Dot1dTpAgingTimeType; 

    typedef ASN1_Integer Dot1dTpFdbStatusType; 
    const Dot1dTpFdbStatusType Dot1dTpFdbStatusType_other = 1;
    const Dot1dTpFdbStatusType Dot1dTpFdbStatusType_invalid = 2;
    const Dot1dTpFdbStatusType Dot1dTpFdbStatusType_learned = 3;
    const Dot1dTpFdbStatusType Dot1dTpFdbStatusType_self = 4;
    const Dot1dTpFdbStatusType Dot1dTpFdbStatusType_mgmt = 5;
    const string Dot1dTpFdbStatusType_NameNumberList = "other (1) , invalid (2) , learned (3) , self (4) , mgmt (5)";

    typedef ASN1_Integer Dot1dTpPortType; 

    typedef ASN1_Integer Dot1dStaticReceivePortType; 

    typedef ASN1_OctetString Dot1dStaticAllowedToGoToType; 

    typedef ASN1_Integer Dot1dStaticStatusType; 
    const Dot1dStaticStatusType Dot1dStaticStatusType_other = 1;
    const Dot1dStaticStatusType Dot1dStaticStatusType_invalid = 2;
    const Dot1dStaticStatusType Dot1dStaticStatusType_permanent = 3;
    const Dot1dStaticStatusType Dot1dStaticStatusType_deleteOnReset = 4;
    const Dot1dStaticStatusType Dot1dStaticStatusType_deleteOnTimeout = 5;
    const string Dot1dStaticStatusType_NameNumberList = "other (1) , invalid (2) , permanent (3) , deleteOnReset (4) , deleteOnTimeout (5)";

    interface dot1dBase : SNMPMgmt::SmiEntry {

        /*
             The MAC address used by this bridge when it must be
             referred to in a unique fashion.  It is recommended
             that this be the numerically smallest MAC address of
             all ports that belong to this bridge.  However, it is only
             
             
             
             required to be unique.  When concatenated with
             dot1dStpPriority, a unique BridgeIdentifier is formed,
             which is used in the Spanning Tree Protocol.
        REFERENCE:
            "IEEE 802.1D-1998: clauses 14.4.1.1.3 and 7.12.5"

        */
        readonly attribute MacAddressType dot1dBaseBridgeAddress;

        /*
             The number of ports controlled by this bridging
             entity.
        REFERENCE:
            "IEEE 802.1D-1998: clause 14.4.1.1.3"

        UNITS:
            "ports"

        */
        readonly attribute ASN1_Integer dot1dBaseNumPorts;

        /*
             Indicates what type of bridging this bridge can
             perform.  If a bridge is actually performing a
             certain type of bridging, this will be indicated by
             entries in the port table for the given type.
        */
        readonly attribute Dot1dBaseTypeType dot1dBaseType;

        /*
             A table that contains generic information about every
             port that is associated with this bridge.  Transparent,
             source-route, and srt ports are included.
        */
        SNMPMgmt::SmiTableIterator get_dot1dBasePortTable();
    };


    /*
             A list of information for each port of the bridge.
    REFERENCE:
            "IEEE 802.1D-1998: clause 14.4.2, 14.6.1"

    */
    interface dot1dBasePortEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "dot1dBasePort";

        /*
             The port number of the port for which this entry
             contains bridge management information.
        */
        readonly attribute Dot1dBasePortType dot1dBasePort;

        /*
             The value of the instance of the ifIndex object,
             defined in IF-MIB, for the interface corresponding
             to this port.
        */
        readonly attribute InterfaceIndexType dot1dBasePortIfIndex;

        /*
             For a port that (potentially) has the same value of
             dot1dBasePortIfIndex as another port on the same bridge.
             This object contains the name of an object instance
             unique to this port.  For example, in the case where
             multiple ports correspond one-to-one with multiple X.25
             virtual circuits, this value might identify an (e.g.,
             the first) object instance associated with the X.25
             virtual circuit corresponding to this port.
             
             For a port which has a unique value of
             dot1dBasePortIfIndex, this object can have the value
             { 0 0 }.
        */
        readonly attribute ASN1_ObjectIdentifier dot1dBasePortCircuit;

        /*
             The number of frames discarded by this port due
             to excessive transit delay through the bridge.  It
             is incremented by both transparent and source
             route bridges.
        REFERENCE:
            "IEEE 802.1D-1998: clause 14.6.1.1.3"

        */
        readonly attribute Counter32Type dot1dBasePortDelayExceededDiscards;

        /*
             The number of frames discarded by this port due
             to an excessive size.  It is incremented by both
             transparent and source route bridges.
        REFERENCE:
            "IEEE 802.1D-1998: clause 14.6.1.1.3"

        */
        readonly attribute Counter32Type dot1dBasePortMtuExceededDiscards;
    };

    interface dot1dStp : SNMPMgmt::SmiEntry {

        /*
             An indication of what version of the Spanning Tree
             Protocol is being run.  The value 'decLb100(2)'
             indicates the DEC LANbridge 100 Spanning Tree protocol.
             IEEE 802.1D implementations will return 'ieee8021d(3)'.
             If future versions of the IEEE Spanning Tree Protocol
             that are incompatible with the current version
             are released a new value will be defined.
        */
        readonly attribute Dot1dStpProtocolSpecificationType dot1dStpProtocolSpecification;

        /*
             The value of the write-able portion of the Bridge ID
             (i.e., the first two octets of the (8 octet long) Bridge
             ID).  The other (last) 6 octets of the Bridge ID are
             given by the value of dot1dBaseBridgeAddress.
             On bridges supporting IEEE 802.1t or IEEE 802.1w,
             permissible values are 0-61440, in steps of 4096.
        REFERENCE:
            "IEEE 802.1D-1998 clause 8.10.2, Table 8-4,
             IEEE 802.1t clause 8.10.2, Table 8-4, clause 14.3."

        */
        attribute Dot1dStpPriorityType dot1dStpPriority;

        /*
             The time (in hundredths of a second) since the
             last time a topology change was detected by the
             bridge entity.
             For RSTP, this reports the time since the tcWhile
             timer for any port on this Bridge was nonzero.
        REFERENCE:
            "IEEE 802.1D-1998 clause 14.8.1.1.,
             IEEE 802.1w clause 14.8.1.1."

        UNITS:
            "centi-seconds"

        */
        readonly attribute TimeTicksType dot1dStpTimeSinceTopologyChange;

        /*
             The total number of topology changes detected by
             this bridge since the management entity was last
             reset or initialized.
        REFERENCE:
            "IEEE 802.1D-1998 clause 14.8.1.1."

        */
        readonly attribute Counter32Type dot1dStpTopChanges;

        /*
             The bridge identifier of the root of the spanning
             tree, as determined by the Spanning Tree Protocol,
             as executed by this node.  This value is used as
             the Root Identifier parameter in all Configuration
             Bridge PDUs originated by this node.
        REFERENCE:
            "IEEE 802.1D-1998: clause 8.5.3.1"

        */
        readonly attribute BridgeIdType dot1dStpDesignatedRoot;

        /*
             The cost of the path to the root as seen from
             this bridge.
        REFERENCE:
            "IEEE 802.1D-1998: clause 8.5.3.2"

        */
        readonly attribute ASN1_Integer dot1dStpRootCost;

        /*
             The port number of the port that offers the lowest
             cost path from this bridge to the root bridge.
        REFERENCE:
            "IEEE 802.1D-1998: clause 8.5.3.3"

        */
        readonly attribute ASN1_Integer dot1dStpRootPort;

        /*
             The maximum age of Spanning Tree Protocol information
             learned from the network on any port before it is
             discarded, in units of hundredths of a second.  This is
             the actual value that this bridge is currently using.
        REFERENCE:
            "IEEE 802.1D-1998: clause 8.5.3.4"

        UNITS:
            "centi-seconds"

        */
        readonly attribute TimeoutType dot1dStpMaxAge;

        /*
             The amount of time between the transmission of
             Configuration bridge PDUs by this node on any port when
             it is the root of the spanning tree, or trying to become
             so, in units of hundredths of a second.  This is the
             actual value that this bridge is currently using.
        REFERENCE:
            "IEEE 802.1D-1998: clause 8.5.3.5"

        UNITS:
            "centi-seconds"

        */
        readonly attribute TimeoutType dot1dStpHelloTime;

        /*
             This time value determines the interval length
             during which no more than two Configuration bridge
             PDUs shall be transmitted by this node, in units
             of hundredths of a second.
        REFERENCE:
            "IEEE 802.1D-1998: clause 8.5.3.14"

        UNITS:
            "centi-seconds"

        */
        readonly attribute ASN1_Integer dot1dStpHoldTime;

        /*
             This time value, measured in units of hundredths of a
             second, controls how fast a port changes its spanning
             state when moving towards the Forwarding state.  The
             value determines how long the port stays in each of the
             Listening and Learning states, which precede the
             Forwarding state.  This value is also used when a
             topology change has been detected and is underway, to
             age all dynamic entries in the Forwarding Database.
             [Note that this value is the one that this bridge is
             currently using, in contrast to
             dot1dStpBridgeForwardDelay, which is the value that this
             bridge and all others would start using if/when this
             bridge were to become the root.]
        REFERENCE:
            "IEEE 802.1D-1998: clause 8.5.3.6"

        UNITS:
            "centi-seconds"

        */
        readonly attribute TimeoutType dot1dStpForwardDelay;

        /*
             The value that all bridges use for MaxAge when this
             bridge is acting as the root.  Note that 802.1D-1998
             specifies that the range for this parameter is related
             to the value of dot1dStpBridgeHelloTime.  The
             granularity of this timer is specified by 802.1D-1998 to
             be 1 second.  An agent may return a badValue error if a
             set is attempted to a value that is not a whole number
             of seconds.
        REFERENCE:
            "IEEE 802.1D-1998: clause 8.5.3.8"

        UNITS:
            "centi-seconds"

        */
        attribute Dot1dStpBridgeMaxAgeType dot1dStpBridgeMaxAge;

        /*
             The value that all bridges use for HelloTime when this
             bridge is acting as the root.  The granularity of this
             timer is specified by 802.1D-1998 to be 1 second.  An
             agent may return a badValue error if a set is attempted
             
             
             
             to a value that is not a whole number of seconds.
        REFERENCE:
            "IEEE 802.1D-1998: clause 8.5.3.9"

        UNITS:
            "centi-seconds"

        */
        attribute Dot1dStpBridgeHelloTimeType dot1dStpBridgeHelloTime;

        /*
             The value that all bridges use for ForwardDelay when
             this bridge is acting as the root.  Note that
             802.1D-1998 specifies that the range for this parameter
             is related to the value of dot1dStpBridgeMaxAge.  The
             granularity of this timer is specified by 802.1D-1998 to
             be 1 second.  An agent may return a badValue error if a
             set is attempted to a value that is not a whole number
             of seconds.
        REFERENCE:
            "IEEE 802.1D-1998: clause 8.5.3.10"

        UNITS:
            "centi-seconds"

        */
        attribute Dot1dStpBridgeForwardDelayType dot1dStpBridgeForwardDelay;

        /*
             A table that contains port-specific information
             for the Spanning Tree Protocol.
        */
        SNMPMgmt::SmiTableIterator get_dot1dStpPortTable();
    };


    /*
             A list of information maintained by every port about
             the Spanning Tree Protocol state for that port.
    */
    interface dot1dStpPortEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "dot1dStpPort";

        /*
             The port number of the port for which this entry
             contains Spanning Tree Protocol management information.
        REFERENCE:
            "IEEE 802.1D-1998: clause 14.8.2.1.2"

        */
        readonly attribute Dot1dStpPortType dot1dStpPort;

        /*
             The value of the priority field that is contained in
             the first (in network byte order) octet of the (2 octet
             long) Port ID.  The other octet of the Port ID is given
             by the value of dot1dStpPort.
             On bridges supporting IEEE 802.1t or IEEE 802.1w,
             permissible values are 0-240, in steps of 16.
        REFERENCE:
            "IEEE 802.1D-1998 clause 8.10.2, Table 8-4,
             
             
             
             IEEE 802.1t clause 8.10.2, Table 8-4, clause 14.3."

        */
        attribute Dot1dStpPortPriorityType dot1dStpPortPriority;

        /*
             The port's current state, as defined by application of
             the Spanning Tree Protocol.  This state controls what
             action a port takes on reception of a frame.  If the
             bridge has detected a port that is malfunctioning, it
             will place that port into the broken(6) state.  For
             ports that are disabled (see dot1dStpPortEnable), this
             object will have a value of disabled(1).
        REFERENCE:
            "IEEE 802.1D-1998: clause 8.5.5.2"

        */
        readonly attribute Dot1dStpPortStateType dot1dStpPortState;

        /*
             The enabled/disabled status of the port.
        REFERENCE:
            "IEEE 802.1D-1998: clause 8.5.5.2"

        */
        attribute Dot1dStpPortEnableType dot1dStpPortEnable;

        /*
             The contribution of this port to the path cost of
             paths towards the spanning tree root which include
             this port.  802.1D-1998 recommends that the default
             value of this parameter be in inverse proportion to
             
             
             
             the speed of the attached LAN.
             
             New implementations should support dot1dStpPortPathCost32.
             If the port path costs exceeds the maximum value of this
             object then this object should report the maximum value,
             namely 65535.  Applications should try to read the
             dot1dStpPortPathCost32 object if this object reports
             the maximum value.
        REFERENCE:
            "IEEE 802.1D-1998: clause 8.5.5.3"

        */
        attribute Dot1dStpPortPathCostType dot1dStpPortPathCost;

        /*
             The unique Bridge Identifier of the Bridge
             recorded as the Root in the Configuration BPDUs
             transmitted by the Designated Bridge for the
             segment to which the port is attached.
        REFERENCE:
            "IEEE 802.1D-1998: clause 8.5.5.4"

        */
        readonly attribute BridgeIdType dot1dStpPortDesignatedRoot;

        /*
             The path cost of the Designated Port of the segment
             connected to this port.  This value is compared to the
             Root Path Cost field in received bridge PDUs.
        REFERENCE:
            "IEEE 802.1D-1998: clause 8.5.5.5"

        */
        readonly attribute ASN1_Integer dot1dStpPortDesignatedCost;

        /*
             The Bridge Identifier of the bridge that this
             port considers to be the Designated Bridge for
             this port's segment.
        REFERENCE:
            "IEEE 802.1D-1998: clause 8.5.5.6"

        */
        readonly attribute BridgeIdType dot1dStpPortDesignatedBridge;

        /*
             The Port Identifier of the port on the Designated
             Bridge for this port's segment.
        REFERENCE:
            "IEEE 802.1D-1998: clause 8.5.5.7"

        */
        readonly attribute Dot1dStpPortDesignatedPortType dot1dStpPortDesignatedPort;

        /*
             The number of times this port has transitioned
             from the Learning state to the Forwarding state.
        */
        readonly attribute Counter32Type dot1dStpPortForwardTransitions;

        /*
             The contribution of this port to the path cost of
             paths towards the spanning tree root which include
             this port.  802.1D-1998 recommends that the default
             value of this parameter be in inverse proportion to
             the speed of the attached LAN.
             
             This object replaces dot1dStpPortPathCost to support
             IEEE 802.1t.
        REFERENCE:
            "IEEE 802.1t clause 8.10.2, Table 8-5."

        */
        attribute Dot1dStpPortPathCost32Type dot1dStpPortPathCost32;
    };

    interface dot1dTp : SNMPMgmt::SmiEntry {

        /*
             The total number of Forwarding Database entries that
             have been or would have been learned, but have been
             discarded due to a lack of storage space in the
             Forwarding Database.  If this counter is increasing, it
             indicates that the Forwarding Database is regularly
             becoming full (a condition that has unpleasant
             performance effects on the subnetwork).  If this counter
             has a significant value but is not presently increasing,
             it indicates that the problem has been occurring but is
             not persistent.
        REFERENCE:
            "IEEE 802.1D-1998: clause 14.7.1.1.3"

        */
        readonly attribute Counter32Type dot1dTpLearnedEntryDiscards;

        /*
             The timeout period in seconds for aging out
             dynamically-learned forwarding information.
             802.1D-1998 recommends a default of 300 seconds.
        REFERENCE:
            "IEEE 802.1D-1998: clause 14.7.1.1.3"

        UNITS:
            "seconds"

        */
        attribute Dot1dTpAgingTimeType dot1dTpAgingTime;

        /*
             A table that contains information about unicast
             entries for which the bridge has forwarding and/or
             filtering information.  This information is used
             by the transparent bridging function in
             determining how to propagate a received frame.
        */
        SNMPMgmt::SmiTableIterator get_dot1dTpFdbTable();

        /*
             A table that contains information about every port that
             is associated with this transparent bridge.
        */
        SNMPMgmt::SmiTableIterator get_dot1dTpPortTable();
    };


    /*
             Information about a specific unicast MAC address
             for which the bridge has some forwarding and/or
             filtering information.
    */
    interface dot1dTpFdbEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "dot1dTpFdbAddress";

        /*
             A unicast MAC address for which the bridge has
             forwarding and/or filtering information.
        REFERENCE:
            "IEEE 802.1D-1998: clause 7.9.1, 7.9.2"

        */
        readonly attribute MacAddressType dot1dTpFdbAddress;

        /*
             Either the value '0', or the port number of the port on
             which a frame having a source address equal to the value
             of the corresponding instance of dot1dTpFdbAddress has
             been seen.  A value of '0' indicates that the port
             number has not been learned, but that the bridge does
             have some forwarding/filtering information about this
             address (e.g., in the dot1dStaticTable).  Implementors
             are encouraged to assign the port value to this object
             whenever it is learned, even for addresses for which the
             corresponding value of dot1dTpFdbStatus is not
             learned(3).
        */
        readonly attribute ASN1_Integer dot1dTpFdbPort;

        /*
             The status of this entry.  The meanings of the
             values are:
                 other(1) - none of the following.  This would
                     include the case where some other MIB object
                     (not the corresponding instance of
                     dot1dTpFdbPort, nor an entry in the
                     dot1dStaticTable) is being used to determine if
                     and how frames addressed to the value of the
                     corresponding instance of dot1dTpFdbAddress are
                     being forwarded.
                 invalid(2) - this entry is no longer valid (e.g.,
                     it was learned but has since aged out), but has
                     not yet been flushed from the table.
                 learned(3) - the value of the corresponding instance
                     of dot1dTpFdbPort was learned, and is being
                     used.
                 self(4) - the value of the corresponding instance of
                     dot1dTpFdbAddress represents one of the bridge's
                     addresses.  The corresponding instance of
                     dot1dTpFdbPort indicates which of the bridge's
                     ports has this address.
                 mgmt(5) - the value of the corresponding instance of
                     dot1dTpFdbAddress is also the value of an
                     existing instance of dot1dStaticAddress.
        */
        readonly attribute Dot1dTpFdbStatusType dot1dTpFdbStatus;
    };


    /*
             A list of information for each port of a transparent
             bridge.
    */
    interface dot1dTpPortEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "dot1dTpPort";

        /*
             The port number of the port for which this entry
             contains Transparent bridging management information.
        */
        readonly attribute Dot1dTpPortType dot1dTpPort;

        /*
             The maximum size of the INFO (non-MAC) field that
             
             
             
             this port will receive or transmit.
        UNITS:
            "bytes"

        */
        readonly attribute ASN1_Integer dot1dTpPortMaxInfo;

        /*
             The number of frames that have been received by this
             port from its segment.  Note that a frame received on the
             interface corresponding to this port is only counted by
             this object if and only if it is for a protocol being
             processed by the local bridging function, including
             bridge management frames.
        REFERENCE:
            "IEEE 802.1D-1998: clause 14.6.1.1.3"

        UNITS:
            "frames"

        */
        readonly attribute Counter32Type dot1dTpPortInFrames;

        /*
             The number of frames that have been transmitted by this
             port to its segment.  Note that a frame transmitted on
             the interface corresponding to this port is only counted
             by this object if and only if it is for a protocol being
             processed by the local bridging function, including
             bridge management frames.
        REFERENCE:
            "IEEE 802.1D-1998: clause 14.6.1.1.3"

        UNITS:
            "frames"

        */
        readonly attribute Counter32Type dot1dTpPortOutFrames;

        /*
             Count of received valid frames that were discarded
             (i.e., filtered) by the Forwarding Process.
        REFERENCE:
            "IEEE 802.1D-1998: clause 14.6.1.1.3"

        UNITS:
            "frames"

        */
        readonly attribute Counter32Type dot1dTpPortInDiscards;
    };

    interface dot1dStatic : SNMPMgmt::SmiEntry {

        /*
             A table containing filtering information configured
             into the bridge by (local or network) management
             specifying the set of ports to which frames received
             from specific ports and containing specific destination
             addresses are allowed to be forwarded.  The value of
             zero in this table, as the port number from which frames
             with a specific destination address are received, is
             used to specify all ports for which there is no specific
             entry in this table for that particular destination
             address.  Entries are valid for unicast and for
             group/broadcast addresses.
        REFERENCE:
            "IEEE 802.1D-1998: clause 14.7.2"

        */
        SNMPMgmt::SmiTableIterator get_dot1dStaticTable();
    };


    /*
             Filtering information configured into the bridge by
             (local or network) management specifying the set of
             ports to which frames received from a specific port and
             containing a specific destination address are allowed to
             be forwarded.
    REFERENCE:
            "IEEE 802.1D-1998: clause 14.7.2"

    */
    interface dot1dStaticEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "dot1dStaticAddress dot1dStaticReceivePort";

        /*
             The destination MAC address in a frame to which this
             entry's filtering information applies.  This object can
             take the value of a unicast address, a group address, or
             the broadcast address.
        REFERENCE:
            "IEEE 802.1D-1998: clause 7.9.1, 7.9.2"

        */
        attribute MacAddressType dot1dStaticAddress;

        /*
             Either the value '0', or the port number of the port
             from which a frame must be received in order for this
             entry's filtering information to apply.  A value of zero
             indicates that this entry applies on all ports of the
             bridge for which there is no other applicable entry.
        */
        attribute Dot1dStaticReceivePortType dot1dStaticReceivePort;

        /*
             The set of ports to which frames received from a
             specific port and destined for a specific MAC address,
             are allowed to be forwarded.  Each octet within the
             value of this object specifies a set of eight ports,
             with the first octet specifying ports 1 through 8, the
             second octet specifying ports 9 through 16, etc.  Within
             each octet, the most significant bit represents the
             lowest numbered port, and the least significant bit
             represents the highest numbered port.  Thus, each port
             of the bridge is represented by a single bit within the
             value of this object.  If that bit has a value of '1',
             then that port is included in the set of ports; the port
             is not included if its bit has a value of '0'.  (Note
             that the setting of the bit corresponding to the port
             from which a frame is received is irrelevant.)  The
             default value of this object is a string of ones of
             appropriate length.
             
             
             
             
             The value of this object may exceed the required minimum
             maximum message size of some SNMP transport (484 bytes,
             in the case of SNMP over UDP, see RFC 3417, section 3.2).
             SNMP engines on bridges supporting a large number of
             ports must support appropriate maximum message sizes.
        */
        attribute Dot1dStaticAllowedToGoToType dot1dStaticAllowedToGoTo;

        /*
             This object indicates the status of this entry.
             The default value is permanent(3).
                 other(1) - this entry is currently in use but the
                     conditions under which it will remain so are
                     different from each of the following values.
                 invalid(2) - writing this value to the object
                     removes the corresponding entry.
                 permanent(3) - this entry is currently in use and
                     will remain so after the next reset of the
                     bridge.
                 deleteOnReset(4) - this entry is currently in use
                     and will remain so until the next reset of the
                     bridge.
                 deleteOnTimeout(5) - this entry is currently in use
                     and will remain so until it is aged out.
        */
        attribute Dot1dStaticStatusType dot1dStaticStatus;
    };

    /* typed push event communication */
    interface Notifications : SNMPMgmt::Notifications {

        /*
             The newRoot trap indicates that the sending agent has
             become the new root of the Spanning Tree; the trap is
             sent by a bridge soon after its election as the new
             
             
             
             root, e.g., upon expiration of the Topology Change Timer,
             immediately subsequent to its election.  Implementation
             of this trap is optional.
        */
        void newRoot (
            in CosNaming::Name src_entry_name,
            in CORBA::ScopedName event_type,
            in ASN1_GeneralizedTime event_time
        );

        /*
             A topologyChange trap is sent by a bridge when any of
             its configured ports transitions from the Learning state
             to the Forwarding state, or from the Forwarding state to
             the Blocking state.  The trap is not sent if a newRoot
             trap is sent for the same transition.  Implementation of
             this trap is optional.
        */
        void topologyChange (
            in CosNaming::Name src_entry_name,
            in CORBA::ScopedName event_type,
            in ASN1_GeneralizedTime event_time
        );
    };

    /* typed pull event communication */
    interface PullNotifications : SNMPMgmt::PullNotifications {

        /*
             The newRoot trap indicates that the sending agent has
             become the new root of the Spanning Tree; the trap is
             sent by a bridge soon after its election as the new
             
             
             
             root, e.g., upon expiration of the Topology Change Timer,
             immediately subsequent to its election.  Implementation
             of this trap is optional.
        */
        void pull_newRoot (
            out CosNaming::Name src_entry_name,
            out CORBA::ScopedName event_type,
            out ASN1_GeneralizedTime event_time
        );
        boolean try_newRoot (
            out CosNaming::Name src_entry_name,
            out CORBA::ScopedName event_type,
            out ASN1_GeneralizedTime event_time
        );

        /*
             A topologyChange trap is sent by a bridge when any of
             its configured ports transitions from the Learning state
             to the Forwarding state, or from the Forwarding state to
             the Blocking state.  The trap is not sent if a newRoot
             trap is sent for the same transition.  Implementation of
             this trap is optional.
        */
        void pull_topologyChange (
            out CosNaming::Name src_entry_name,
            out CORBA::ScopedName event_type,
            out ASN1_GeneralizedTime event_time
        );
        boolean try_topologyChange (
            out CosNaming::Name src_entry_name,
            out CORBA::ScopedName event_type,
            out ASN1_GeneralizedTime event_time
        );
    };

    interface SmiEntryFactory : SNMPMgmt::GenericFactory {

        dot1dStp create_dot1dStp (
            in Dot1dStpPriorityType dot1dStpPriority,
            in Dot1dStpBridgeMaxAgeType dot1dStpBridgeMaxAge,
            in Dot1dStpBridgeHelloTimeType dot1dStpBridgeHelloTime,
            in Dot1dStpBridgeForwardDelayType dot1dStpBridgeForwardDelay
        ) raises (
            SNMPMgmt::AlreadyExists,
            CosLifeCycle::InvalidCriteria,
            CosLifeCycle::CannotMeetCriteria
        );

        dot1dStpPortEntry create_dot1dStpPortEntry (
            in Dot1dStpPortType dot1dStpPort,
            in Dot1dStpPortPriorityType dot1dStpPortPriority,
            in Dot1dStpPortEnableType dot1dStpPortEnable,
            in Dot1dStpPortPathCostType dot1dStpPortPathCost,
            in Dot1dStpPortPathCost32Type dot1dStpPortPathCost32
        ) raises (
            SNMPMgmt::AlreadyExists,
            CosLifeCycle::InvalidCriteria,
            CosLifeCycle::CannotMeetCriteria
        );

        dot1dTp create_dot1dTp (
            in Dot1dTpAgingTimeType dot1dTpAgingTime
        ) raises (
            SNMPMgmt::AlreadyExists,
            CosLifeCycle::InvalidCriteria,
            CosLifeCycle::CannotMeetCriteria
        );

        dot1dStaticEntry create_dot1dStaticEntry (
            in MacAddressType dot1dStaticAddress,
            in Dot1dStaticReceivePortType dot1dStaticReceivePort,
            in Dot1dStaticAllowedToGoToType dot1dStaticAllowedToGoTo,
            in Dot1dStaticStatusType dot1dStaticStatus
        ) raises (
            SNMPMgmt::AlreadyExists,
            CosLifeCycle::InvalidCriteria,
            CosLifeCycle::CannotMeetCriteria
        );
    };

    /* pseudo */
    interface TextualConventions {

        /*
             A Spanning Tree Protocol (STP) timer in units of 1/100
             seconds.  Several objects in this MIB module represent
             values of timers used by the Spanning Tree Protocol.
             In this MIB, these timers have values in units of
             hundredths of a second (i.e., 1/100 secs).
             
             These timers, when stored in a Spanning Tree Protocol's
             BPDU, are in units of 1/256 seconds.  Note, however, that
             802.1D-1998 specifies a settable granularity of no more
             than one second for these timers.  To avoid ambiguity,
             a conversion algorithm is defined below for converting
             between the different units, which ensures a timer's
             value is not distorted by multiple conversions.
             
             To convert a Timeout value into a value in units of
             1/256 seconds, the following algorithm should be used:
             
                 b = floor( (n * 256) / 100)
             
             where:
                 floor   =  quotient [ignore remainder]
                 n is the value in 1/100 second units
                 b is the value in 1/256 second units
             
             To convert the value from 1/256 second units back to
             1/100 seconds, the following algorithm should be used:
             
                 n = ceiling( (b * 100) / 256)
             
             where:
                 ceiling = quotient [if remainder is 0], or
                           quotient + 1 [if remainder is nonzero]
                 n is the value in 1/100 second units
             
             
             
                 b is the value in 1/256 second units
             
             Note: it is important that the arithmetic operations are
             done in the order specified (i.e., multiply first,
             divide second).
        DISPLAY-HINT: d
        */
        string TimeoutToString (in TimeoutType Value);
        TimeoutType TimeoutFromString (in string str);
    };

};

#endif /* !_BRIDGE_MIB_IDL_ */
