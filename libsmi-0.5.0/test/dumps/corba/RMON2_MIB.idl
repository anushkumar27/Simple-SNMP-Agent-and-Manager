/*							-- DO NOT EDIT --
 * This IDL file has been generated by smidump version 0.4.8:
 *   smidump -f corba RMON2-MIB
 *
 * Derived from RMON2-MIB:
 *   The MIB module for managing remote monitoring
 *   device implementations.  This MIB module
 *   extends the architecture introduced in the original
 *   RMON MIB as specified in RFC 2819.
 *   
 *   Copyright (C) The Internet Society (2006).  This version of
 *   this MIB module is part of RFC 4502;  see the RFC itself for
 *   full legal notices.
 *
 * Revision 2006-05-02 00:00:
 *   This version updates the proposed-standard version of the
 *   RMON2 MIB (published as RFC 2021) by adding 2 new
 *   enumerations to the nlMatrixTopNControlRateBase object and
 *   4 new enumerations to the alMatrixTopNControlRateBase object.
 *   These new enumerations support the creation of high-capacity
 *   topN reports in the High Capacity RMON MIB [RFC3273].
 *   
 *   Additionally, the following objects have been deprecated, as
 *   they have not had enough independent implementations to
 *   demonstrate interoperability to meet the requirements of a
 *   Draft Standard:
 *   
 *   probeDownloadFile
 *   probeDownloadTFTPServer
 *   probeDownloadAction
 *   probeDownloadStatus
 *   
 *   
 *   
 *   serialMode
 *   serialProtocol
 *   serialTimeout
 *   serialModemInitString
 *   serialModemHangUpString
 *   serialModemConnectResp
 *   serialModemNoConnectResp
 *   serialDialoutTimeout
 *   serialStatus
 *   serialConnectDestIpAddress
 *   serialConnectType
 *   serialConnectDialString
 *   serialConnectSwitchConnectSeq
 *   serialConnectSwitchDisconnectSeq
 *   serialConnectSwitchResetSeq
 *   serialConnectOwner
 *   serialConnectStatus
 *   netConfigIPAddress
 *   netConfigSubnetMask
 *   netConfigStatus
 *   netDefaultGateway
 *   tokenRingMLStats2DroppedFrames
 *   tokenRingMLStats2CreateTime
 *   tokenRingPStats2DroppedFrames
 *   tokenRingPStats2CreateTime
 *   ringStationControl2DroppedFrames
 *   ringStationControl2CreateTime
 *   sourceRoutingStats2DroppedFrames
 *   sourceRoutingStats2CreateTime
 *   trapDestIndex
 *   trapDestCommunity
 *   trapDestProtocol
 *   trapDestAddress
 *   trapDestOwner
 *   trapDestStatus
 *   
 *   In addition, two corrections were made.  The LastCreateTime
 *   Textual Convention had been defined with a base type of
 *   another textual convention, which isn't allowed in SMIv2.  The
 *   definition has been modified to use TimeTicks as the base
 *   type.
 *   
 *   Further, the SerialConfigEntry SEQUENCE definition included
 *   sub-typing information that is not allowed in SMIv2.  This
 *   information has been deleted.  Ranges were added to a number of
 *   objects and textual-conventions to constrain their maximum
 *   (and sometimes minimum) sizes.  The addition of these ranges
 *   documents existing practice for these objects.  These objects
 *   
 *   
 *   
 *   are:
 *       ControlString
 *       protocolDirID
 *       protocolDirParameters
 *       addressMapNetworkAddress
 *       nlHostAddress
 *       nlMatrixSDSourceAddress
 *       nlMatrixSDDestAddress
 *       nlMatrixDSSourceAddress
 *       nlMatrixDSDestAddress
 *       nlMatrixTopNSourceAddress
 *       nlMatrixTopNDestAddress
 *       alHostEntry
 *       alMatrixSDEntry
 *       alMatrixDSEntry
 *       alMatrixTopNSourceAddress
 *       alMatrixTopNDestAddress
 *   
 *   Finally, the TimeFilter TC has been updated to encourage agent
 *   implementations that allow a MIB walk to behave well even when
 *   performed by an application that is not aware of the special
 *   TimeFilter semantics.
 *
 * Revision 2002-07-08 00:00:
 *   Added new enumerations to support the High-Capacity RMON
 *   MIB as defined in RFC 3273.  Also fixed some typos and
 *   added clarifications.
 *
 * Revision 1996-05-27 00:00:
 *   Original version.  Published as RFC 2021.
 *
 * $Id: RMON2_MIB.idl 1771 2012-03-30 11:43:34Z schoenw $
 */

#ifndef _RMON2_MIB_IDL_
#define _RMON2_MIB_IDL_

#include <ASN1Types.idl>
#include <SNMPMgmt.idl>
#include <IF_MIB.idl>
#include <RMON_MIB.idl>
#include <SNMPv2_SMI.idl>
#include <SNMPv2_TC.idl>

module RMON2_MIB {

    typedef IF_MIB::InterfaceIndexType InterfaceIndexType;
    typedef RMON_MIB::OwnerStringType OwnerStringType;
    typedef SNMPv2_SMI::Counter32Type Counter32Type;
    typedef SNMPv2_SMI::Gauge32Type Gauge32Type;
    typedef SNMPv2_SMI::Integer32Type Integer32Type;
    typedef SNMPv2_SMI::IpAddressType IpAddressType;
    typedef SNMPv2_TC::RowStatusType RowStatusType;
    typedef SNMPv2_TC::TimeStampType TimeStampType;

    const string moduleIdentity = "rmon";
    const ASN1_ObjectIdentifier rmon = "::RMON2_MIB::rmon";

    /*
             The MIB module for managing remote monitoring
             device implementations.  This MIB module
             extends the architecture introduced in the original
             RMON MIB as specified in RFC 2819.
             
             Copyright (C) The Internet Society (2006).  This version of
             this MIB module is part of RFC 4502;  see the RFC itself for
             full legal notices.

    LAST-UPDATED:   200605020000Z

    ORGANIZATION:
            "IETF RMON MIB Working Group"

    CONTACT-INFO:
            "Author:
             Steve Waldbusser
             Phone:  +1-650-948-6500
             Fax :   +1-650-745-0671
             Email:  waldbusser@nextbeacon.com
             
             Working Group Chair:
             Andy Bierman
             E-mail: ietf@andybierman.com
             
             Working Group Mailing List: <rmonmib@ietf.org>
             To subscribe send email to: <rmonmib-request@ietf.org>    "

    REVISION:       "200605020000Z"
    REVISION-DESCRIPTION:
            "This version updates the proposed-standard version of the
             RMON2 MIB (published as RFC 2021) by adding 2 new
             enumerations to the nlMatrixTopNControlRateBase object and
             4 new enumerations to the alMatrixTopNControlRateBase object.
             These new enumerations support the creation of high-capacity
             topN reports in the High Capacity RMON MIB [RFC3273].
             
             Additionally, the following objects have been deprecated, as
             they have not had enough independent implementations to
             demonstrate interoperability to meet the requirements of a
             Draft Standard:
             
             probeDownloadFile
             probeDownloadTFTPServer
             probeDownloadAction
             probeDownloadStatus
             
             
             
             serialMode
             serialProtocol
             serialTimeout
             serialModemInitString
             serialModemHangUpString
             serialModemConnectResp
             serialModemNoConnectResp
             serialDialoutTimeout
             serialStatus
             serialConnectDestIpAddress
             serialConnectType
             serialConnectDialString
             serialConnectSwitchConnectSeq
             serialConnectSwitchDisconnectSeq
             serialConnectSwitchResetSeq
             serialConnectOwner
             serialConnectStatus
             netConfigIPAddress
             netConfigSubnetMask
             netConfigStatus
             netDefaultGateway
             tokenRingMLStats2DroppedFrames
             tokenRingMLStats2CreateTime
             tokenRingPStats2DroppedFrames
             tokenRingPStats2CreateTime
             ringStationControl2DroppedFrames
             ringStationControl2CreateTime
             sourceRoutingStats2DroppedFrames
             sourceRoutingStats2CreateTime
             trapDestIndex
             trapDestCommunity
             trapDestProtocol
             trapDestAddress
             trapDestOwner
             trapDestStatus
             
             In addition, two corrections were made.  The LastCreateTime
             Textual Convention had been defined with a base type of
             another textual convention, which isn't allowed in SMIv2.  The
             definition has been modified to use TimeTicks as the base
             type.
             
             Further, the SerialConfigEntry SEQUENCE definition included
             sub-typing information that is not allowed in SMIv2.  This
             information has been deleted.  Ranges were added to a number of
             objects and textual-conventions to constrain their maximum
             (and sometimes minimum) sizes.  The addition of these ranges
             documents existing practice for these objects.  These objects
             
             
             
             are:
                 ControlString
                 protocolDirID
                 protocolDirParameters
                 addressMapNetworkAddress
                 nlHostAddress
                 nlMatrixSDSourceAddress
                 nlMatrixSDDestAddress
                 nlMatrixDSSourceAddress
                 nlMatrixDSDestAddress
                 nlMatrixTopNSourceAddress
                 nlMatrixTopNDestAddress
                 alHostEntry
                 alMatrixSDEntry
                 alMatrixDSEntry
                 alMatrixTopNSourceAddress
                 alMatrixTopNDestAddress
             
             Finally, the TimeFilter TC has been updated to encourage agent
             implementations that allow a MIB walk to behave well even when
             performed by an application that is not aware of the special
             TimeFilter semantics."

    REVISION:       "200207080000Z"
    REVISION-DESCRIPTION:
            "Added new enumerations to support the High-Capacity RMON
             MIB as defined in RFC 3273.  Also fixed some typos and
             added clarifications."

    REVISION:       "199605270000Z"
    REVISION-DESCRIPTION:
            "Original version.  Published as RFC 2021."

    */

    /*
             This TC describes an object that counts events with the
             following semantics: objects of this type will be set to
             zero(0) on creation and will thereafter count appropriate
             events, wrapping back to zero(0) when the value 2^32 is
             reached.
             
             Provided that an application discovers the new object within
             the minimum time to wrap, it can use the initial value as a
             delta since it last polled the table of which this object is
             part.  It is important for a management station to be aware of
             this minimum time and the actual time between polls, and to
             discard data if the actual time is too long or there is no
             defined minimum time.
             
             Typically, this TC is used in tables where the INDEX space is
             constantly changing and/or the TimeFilter mechanism is in use.
    */
    typedef ASN1_Unsigned ZeroBasedCounter32Type; 

    /*
             This TC describes an object that stores the value of the
             sysUpTime object at the last time its entry was created.
             
             This can be used for polling applications to determine that an
             entry has been deleted and re-created between polls, causing
             an otherwise undetectable discontinuity in the data.
             
             If sysUpTime is reset to zero as a result of a re-
             initialization of the network management (sub)system, then
             the values of all LastCreateTime objects are also reset.
             However, after approximately 497 days without a re-
             initialization, the sysUpTime object will reach 2^^32-1 and
             then increment to zero; in this case, existing values
             of TimeStamp objects do not change.  This can lead to
             ambiguities in the value of TimeStamp objects.
    */
    typedef ASN1_Unsigned LastCreateTimeType; 

    /*
             To be used for the index to a table.  Allows an application
             to download only those rows changed since a particular time.
             
             
             
             Note that this is not a history mechanism.  Only current values
             of underlying objects are returned; saved instance values
             associated with particular values of sysUpTime are not.
             
             An entry is considered changed if the value of any object in the
             entry changes, if the row is created, or if any object in the
             entry is created or deleted.  Note that deleted entries cannot
             be detected or downloaded.
             
             A time-filtered conceptual table is created by inserting a
             single object of SYNTAX TimeFilter as the first INDEX component
             in a copy of an existing basic conceptual table (i.e., any
             SEQUENCE without a TimeFilter INDEX component).  Thus, for
             each conceptual entry 'I' in the basic table, there exists N
             conceptual entries in the time-filtered version, indexed N.I,
             where 'N' is equal to the value of sysUpTime.
             
             When an application retrieves conceptual instances from a
             time-filtered table, and an INDEX value is provided for the
             TimeFilter INDEX component 'N', the agent will only consider
             returning basic conceptual entries (e.g., 'fooColumn.N.I') if
             any column within the basic conceptual entry has changed since
             sysUpTime 'N'.  If not, the basic conceptual entry will
             be ignored for the particular retrieval operation.
             
             When sysUpTime is equal to zero, this table shall be empty.
             
             One conceptual entry exists for each past value of sysUpTime,
             except that the whole table is purged should sysUpTime wrap.
             
             As an entry in a time-filtered table is updated (i.e., one of
             the columns in the basic conceptual table is changed), new
             conceptual entries are also created in the time-filtered version
             (which still shares the now updated object values with all other
             instances).  The number of unique time-filtered instances that
             are created is determined by the value of sysUpTime at which the
             basic entry was last updated.  One unique instance will exist
             for each value of sysUpTime at the last update time for the row.
             However, a new TimeFilter index instance is created for each new
             sysUpTime value.  The TimeFilter index values not associated
             with entry updates are called duplicate time-filtered instances.
             
             After some deployment experience, it has been determined that
             a time-filtered table is more efficient if the agent
             stops a MIB walk operation by skipping over rows with a
             TimeFilter index value higher than the value in the received
             GetNext/GetBulk request.  That is, instead of incrementing a
             TimeFilter index value, the agent will continue to the next
             
             
             
             object or table.  As a consequence, GetNext or GetBulk
             operations will provide only one pass through a time-filtered
             table.
             
             It is suggested that an agent implement a time-filtered table
             in this manner to improve performance and avoid a MIB walk
             getting stuck in time-filtered tables.  It is, however, still
             acceptable for an agent to implement a time-filtered table in
             the traditional manner (i.e., every conceptual time-filtered
             instance is returned in GetNext and GetBulk PDU responses), and
             management applications must be able to deal with such
             traditional implementations.
             
             See the appendix for further discussion of this textual
             convention.
             
             The following example is provided to demonstrate TimeFilter
             behavior:
             
             Consider the following basic conceptual table, basicFooTable.
             (Note that the basic version of a time-filtered table may not
             actually be defined.)
             
                 basicFooTable:
             
                 basicFooTable ...
                 INDEX { fooIndex }
             
                 BasicFooEntry {
                    fooIndex     Integer32,
                    fooCounts    Counter32
                 }
             
             For this example, the basicFooTable contains two static
             conceptual entries (fooIndex equals '1' and '2'), created at
             time zero.  It also contains one dynamic conceptual entry
             (fooIndex equals '3'), which is created at time '3' and deleted
             at time '7'.
             
             The time-filtered version of the basicFooTable could be defined
             as follows:
             
                 FooTable:
             
                 fooTable ...
                 INDEX { fooTimeMark, fooIndex }
             
                 FooEntry {
             
             
             
                    fooTimeMark  TimeFilter,
                    fooIndex     Integer32,
                    fooCounts    Counter32
                 }
             
             
             Note that entries exist in the time-filtered conceptual table
             only if they actually exist in the underlying (basic) table.
             
             For this example, the fooTable will have three underlying
             basic entries (fooIndex == 1, 2, and 3), with the following
             activity (for sysUpTime equal 0 to 9):
             
                - fooEntry.N.1 is created at time '0' and most recently
                  updated at time '6' to the value '5'.
                - fooEntry.N.2 is created at time '0' and most recently
                  updated at time '8' to the value '9'.
                - fooEntry.N.3 is created at time '3', updated at time '5'
                  to the value '17', and deleted at time '7'.
             
             The following tables show the values that would be returned for
             MIB walk operations with various TimeFilter values, done at
             different times.  An application issues a retrieval request at
             time 'T', with a TimeFilter value, 'N' (typically set to a lower
             value, such as the value of sysUpTime at the last polling cycle).
             
             The following values would be returned in a MIB walk of
             fooCounts.N if T equals '0' and N equals '0':
             
                  fooCounts.N.I    Value
                  ==========================
                  fooCounts.0.1    0
                  fooCounts.0.2    0
             
              Note that nothing is returned for fooCounts.0.3, since that
              entry does not exist at sysUpTime equals '0'.
             
             The following values would be returned in a full (traditional) MIB
             walk of fooCounts.N if T equals '3' and N equals '0':
             
                  fooCounts.N.I    Value
                  =======================
                  fooCounts.0.1    0
                  fooCounts.0.2    0
                  fooCounts.0.3    0
                  fooCounts.1.3    0
                  fooCounts.2.3    0
                  fooCounts.3.3    0
             
             
             
              Note that there are no instances for T equals 1 or 2 for the
              first two values of N, as these entries did not change
              since they were created at time '0'.
             
              Note that the current value for 'fooCounts.N.3' is returned
              here, even for values of N less than '3' (when the entry was
              created).  The agent only considers the current existence of an
              entry in the TimeFilter algorithm, not the time when the entry
              was created.
             
              Note that the instances 'fooCounts.0.3', 'fooCounts.1.3',
              and 'fooCounts.2.3' are duplicates and can be suppressed by the
              agent in a MIB walk.
             
             The following values would be returned in a full (traditional)
             MIB walk of fooCounts.N if T equals '6' and N equals '3':
             
                  fooCounts.N.I    Value
                  =======================
                  fooCounts.3.1    5
                  fooCounts.3.3    17
                  fooCounts.4.1    5
                  fooCounts.4.3    17
                  fooCounts.5.1    5
                  fooCounts.5.3    17
                  fooCounts.6.1    5
             
               Note that no instances for entry 'fooCounts.N.2' are returned,
               since it has not changed since time '3'.
             
               Note that all instances except 'fooCounts.5.3' and
               'fooCounts.6.1' are duplicates and can be suppressed by the
               agent in a MIB walk.
             
             The following values would be returned in a full (traditional)
             MIB walk of fooCounts.N if T equals '9' and N equals '6':
             
                  fooCounts.N.I    Value
                  =======================
                  fooCounts.6.1    5
                  fooCounts.6.2    9
                  fooCounts.7.2    9
                  fooCounts.8.2    9
             
               Note that no instances for entry 'fooCounts.N.3' are returned,
               since it was deleted at time '7'.
             
               Note that instances 'fooCounts.6.2' and 'fooCounts.7.2'
             
             
             
               are duplicates and can be suppressed by the agent in a MIB
               walk.
    */
    typedef ASN1_Unsigned TimeFilterType; 

    /*
             Identifies the source of the data that the associated
             function is configured to analyze.  This source can be any
             interface on this device.
             
             In order to identify a particular interface, this
             object shall identify the instance of the ifIndex
             object, defined in [RFC2863], for the desired interface.
             
             For example, if an entry were to receive data from
             interface #1, this object would be set to ifIndex.1.
    */
    typedef ASN1_ObjectIdentifier DataSourceType; 

    /*
             This data type is used to communicate with a modem or a
             
             
             
             serial data switch.  A ControlString contains embedded
             commands to control how the device will interact with the
             remote device through the serial interface.  Commands are
             represented as two-character sequences beginning with
             the '^' character.
             
             The following commands are recognized by the device (note
             that command characters are case sensitive):
             
                ^s  Send string that follows, which is terminated by the
                    next command or the end of string.
                ^c  Delay for the number of seconds that follows.  Toss
                    out any data received rather than store it in a
                    buffer for parsing.
                ^t  Set timeout to the value represented by the decimal
                    digits that follow.  The default timeout is 20
                    seconds.  Note that this timeout may be overridden
                    by a smaller serialTimeout configured for the
                    associated serial interface (see serialConfigTable).
                ^w  Wait for the reply string that follows, which is
                    terminated by the next command or the end of string.
                    Partial and case-insensitive matching is applied, i.e.,
                    if the reply string (any case combination) is found
                    anywhere in the received string, then the a match is
                    found.  If the current timeout elapses without a match,
                    then the remaining control string is ignored.
                ^!  The ^ character.
                ^d  Delay the number of seconds specified by the decimal
                    digits that follow.
                ^b  Send break for the number of milliseconds specified by
                    the decimal digits that follow.  If no digits follow,
                    break will be enforced for 250 milliseconds by default.
             
             The following ASCII control characters may be inserted into
             the '^s' send string or the '^w' reply string:
             
                ^@    0x00
                ^A    0x01
                 ..
                ^M    0x0D
                 ..
                ^Z    0x1A
                ^[    0x1B
                ^    0x1C
                ^]    0x1D
                ^^    0x1E
                ^_    0x1F
             
             
             
             
             Binary data may also be inserted into the data stream.  The
             control sequence for each byte of binary data is ^0x##, where
             ## is the hexadecimal representation of the data byte.  Two
             ASCII characters (0-9, a-f, A-F) must follow the '^0x'
             control prefix.  For example, '^0x0D^0x0A' is interpreted as a
             carriage return followed by a line feed.
    */
    typedef ASN1_OctetString ControlStringType; 

    typedef ASN1_Integer FilterProtocolDirDataLocalIndexType; 

    typedef ASN1_Integer FilterProtocolDirLocalIndexType; 

    typedef ASN1_OctetString ProtocolDirIDType; 

    typedef ASN1_OctetString ProtocolDirParametersType; 

    typedef ASN1_Integer ProtocolDirLocalIndexType; 

    typedef ASN1_OctetString ProtocolDirDescrType; 

    typedef ASN1_OctetString ProtocolDirTypeType; 

    typedef ASN1_Integer ProtocolDirAddressMapConfigType; 
    const ProtocolDirAddressMapConfigType ProtocolDirAddressMapConfigType_notSupported = 1;
    const ProtocolDirAddressMapConfigType ProtocolDirAddressMapConfigType_supportedOff = 2;
    const ProtocolDirAddressMapConfigType ProtocolDirAddressMapConfigType_supportedOn = 3;
    const string ProtocolDirAddressMapConfigType_NameNumberList = "notSupported (1) , supportedOff (2) , supportedOn (3)";

    typedef ASN1_Integer ProtocolDirHostConfigType; 
    const ProtocolDirHostConfigType ProtocolDirHostConfigType_notSupported = 1;
    const ProtocolDirHostConfigType ProtocolDirHostConfigType_supportedOff = 2;
    const ProtocolDirHostConfigType ProtocolDirHostConfigType_supportedOn = 3;
    const string ProtocolDirHostConfigType_NameNumberList = "notSupported (1) , supportedOff (2) , supportedOn (3)";

    typedef ASN1_Integer ProtocolDirMatrixConfigType; 
    const ProtocolDirMatrixConfigType ProtocolDirMatrixConfigType_notSupported = 1;
    const ProtocolDirMatrixConfigType ProtocolDirMatrixConfigType_supportedOff = 2;
    const ProtocolDirMatrixConfigType ProtocolDirMatrixConfigType_supportedOn = 3;
    const string ProtocolDirMatrixConfigType_NameNumberList = "notSupported (1) , supportedOff (2) , supportedOn (3)";

    typedef ASN1_Integer ProtocolDistControlIndexType; 

    typedef ASN1_Integer AddressMapMaxDesiredEntriesType; 

    typedef ASN1_Integer AddressMapControlIndexType; 

    typedef ASN1_OctetString AddressMapNetworkAddressType; 

    typedef ASN1_Integer HlHostControlIndexType; 

    typedef ASN1_Integer HlHostControlNlMaxDesiredEntriesType; 

    typedef ASN1_Integer HlHostControlAlMaxDesiredEntriesType; 

    typedef ASN1_OctetString NlHostAddressType; 

    typedef ASN1_Integer HlMatrixControlIndexType; 

    typedef ASN1_Integer HlMatrixControlNlMaxDesiredEntriesType; 

    typedef ASN1_Integer HlMatrixControlAlMaxDesiredEntriesType; 

    typedef ASN1_OctetString NlMatrixSDSourceAddressType; 

    typedef ASN1_OctetString NlMatrixSDDestAddressType; 

    typedef ASN1_OctetString NlMatrixDSSourceAddressType; 

    typedef ASN1_OctetString NlMatrixDSDestAddressType; 

    typedef ASN1_Integer NlMatrixTopNControlIndexType; 

    typedef ASN1_Integer NlMatrixTopNControlMatrixIndexType; 

    typedef ASN1_Integer NlMatrixTopNControlRateBaseType; 
    const NlMatrixTopNControlRateBaseType NlMatrixTopNControlRateBaseType_nlMatrixTopNPkts = 1;
    const NlMatrixTopNControlRateBaseType NlMatrixTopNControlRateBaseType_nlMatrixTopNOctets = 2;
    const NlMatrixTopNControlRateBaseType NlMatrixTopNControlRateBaseType_nlMatrixTopNHighCapacityPkts = 3;
    const NlMatrixTopNControlRateBaseType NlMatrixTopNControlRateBaseType_nlMatrixTopNHighCapacityOctets = 4;
    const string NlMatrixTopNControlRateBaseType_NameNumberList = "nlMatrixTopNPkts (1) , nlMatrixTopNOctets (2) , nlMatrixTopNHighCapacityPkts (3) , nlMatrixTopNHighCapacityOctets (4)";

    typedef ASN1_Integer NlMatrixTopNControlTimeRemainingType; 

    typedef ASN1_Integer NlMatrixTopNControlRequestedSizeType; 

    typedef ASN1_Integer NlMatrixTopNControlGrantedSizeType; 

    typedef ASN1_Integer NlMatrixTopNIndexType; 

    typedef ASN1_Integer NlMatrixTopNProtocolDirLocalIndexType; 

    typedef ASN1_OctetString NlMatrixTopNSourceAddressType; 

    typedef ASN1_OctetString NlMatrixTopNDestAddressType; 

    typedef ASN1_Integer AlMatrixTopNControlIndexType; 

    typedef ASN1_Integer AlMatrixTopNControlMatrixIndexType; 

    typedef ASN1_Integer AlMatrixTopNControlRateBaseType; 
    const AlMatrixTopNControlRateBaseType AlMatrixTopNControlRateBaseType_alMatrixTopNTerminalsPkts = 1;
    const AlMatrixTopNControlRateBaseType AlMatrixTopNControlRateBaseType_alMatrixTopNTerminalsOctets = 2;
    const AlMatrixTopNControlRateBaseType AlMatrixTopNControlRateBaseType_alMatrixTopNAllPkts = 3;
    const AlMatrixTopNControlRateBaseType AlMatrixTopNControlRateBaseType_alMatrixTopNAllOctets = 4;
    const AlMatrixTopNControlRateBaseType AlMatrixTopNControlRateBaseType_alMatrixTopNTerminalsHighCapacityPkts = 5;
    const AlMatrixTopNControlRateBaseType AlMatrixTopNControlRateBaseType_alMatrixTopNTerminalsHighCapacityOctets = 6;
    const AlMatrixTopNControlRateBaseType AlMatrixTopNControlRateBaseType_alMatrixTopNAllHighCapacityPkts = 7;
    const AlMatrixTopNControlRateBaseType AlMatrixTopNControlRateBaseType_alMatrixTopNAllHighCapacityOctets = 8;
    const string AlMatrixTopNControlRateBaseType_NameNumberList = "alMatrixTopNTerminalsPkts (1) , alMatrixTopNTerminalsOctets (2) , alMatrixTopNAllPkts (3) , alMatrixTopNAllOctets (4) , alMatrixTopNTerminalsHighCapacityPkts (5) , alMatrixTopNTerminalsHighCapacityOctets (6) , alMatrixTopNAllHighCapacityPkts (7) , alMatrixTopNAllHighCapacityOctets (8)";

    typedef ASN1_Integer AlMatrixTopNControlTimeRemainingType; 

    typedef ASN1_Integer AlMatrixTopNControlRequestedSizeType; 

    typedef ASN1_Integer AlMatrixTopNControlGrantedSizeType; 

    typedef ASN1_Integer AlMatrixTopNIndexType; 

    typedef ASN1_Integer AlMatrixTopNProtocolDirLocalIndexType; 

    typedef ASN1_OctetString AlMatrixTopNSourceAddressType; 

    typedef ASN1_OctetString AlMatrixTopNDestAddressType; 

    typedef ASN1_Integer AlMatrixTopNAppProtocolDirLocalIndexType; 

    typedef ASN1_Integer UsrHistoryControlIndexType; 

    typedef ASN1_Integer UsrHistoryControlObjectsType; 

    typedef ASN1_Integer UsrHistoryControlBucketsRequestedType; 

    typedef ASN1_Integer UsrHistoryControlBucketsGrantedType; 

    typedef ASN1_Integer UsrHistoryControlIntervalType; 

    typedef ASN1_Integer UsrHistoryObjectIndexType; 

    typedef ASN1_Integer UsrHistoryObjectSampleTypeType; 
    const UsrHistoryObjectSampleTypeType UsrHistoryObjectSampleTypeType_absoluteValue = 1;
    const UsrHistoryObjectSampleTypeType UsrHistoryObjectSampleTypeType_deltaValue = 2;
    const string UsrHistoryObjectSampleTypeType_NameNumberList = "absoluteValue (1) , deltaValue (2)";

    typedef ASN1_Integer UsrHistorySampleIndexType; 

    typedef ASN1_Integer UsrHistoryValStatusType; 
    const UsrHistoryValStatusType UsrHistoryValStatusType_valueNotAvailable = 1;
    const UsrHistoryValStatusType UsrHistoryValStatusType_valuePositive = 2;
    const UsrHistoryValStatusType UsrHistoryValStatusType_valueNegative = 3;
    const string UsrHistoryValStatusType_NameNumberList = "valueNotAvailable (1) , valuePositive (2) , valueNegative (3)";

    typedef ASN1_OctetString ProbeCapabilitiesType; 

    typedef ASN1_OctetString ProbeSoftwareRevType; 

    typedef ASN1_OctetString ProbeHardwareRevType; 

    typedef ASN1_OctetString ProbeDateTimeType; 

    typedef ASN1_Integer ProbeResetControlType; 
    const ProbeResetControlType ProbeResetControlType_running = 1;
    const ProbeResetControlType ProbeResetControlType_warmBoot = 2;
    const ProbeResetControlType ProbeResetControlType_coldBoot = 3;
    const string ProbeResetControlType_NameNumberList = "running (1) , warmBoot (2) , coldBoot (3)";


    /*
             Contains the RMON-2 augmentations to RMON-1.
    */
    interface etherStats2Entry : RMON_MIB::etherStatsEntry {

        /*
             The total number of frames that were received by the probe
             and therefore not accounted for in the *StatsDropEvents, but
             that the probe chose not to count for this entry for
             whatever reason.  Most often, this event occurs when the
             probe is out of some resources and decides to shed load from
             this collection.
             
             This count does not include packets that were not counted
             because they had MAC-layer errors.
             
             Note that, unlike the dropEvents counter, this number is the
             exact number of frames dropped.
        */
        readonly attribute Counter32Type etherStatsDroppedFrames;

        /*
             The value of sysUpTime when this control entry was last
             activated.  This can be used by the management station to
             ensure that the table has not been deleted and recreated
             between polls.
        */
        readonly attribute LastCreateTimeType etherStatsCreateTime;
    };


    /*
             Contains the RMON-2 augmentations to RMON-1.
    */
    interface historyControl2Entry : RMON_MIB::historyControlEntry {

        /*
             The total number of frames that were received by the probe
             and therefore not accounted for in the *StatsDropEvents, but
             that the probe chose not to count for this entry for
             whatever reason.  Most often, this event occurs when the
             probe is out of some resources and decides to shed load from
             this collection.
             
             This count does not include packets that were not counted
             because they had MAC-layer errors.
             
             Note that, unlike the dropEvents counter, this number is the
             exact number of frames dropped.
        */
        readonly attribute Counter32Type historyControlDroppedFrames;
    };


    /*
             Contains the RMON-2 augmentations to RMON-1.
    */
    interface hostControl2Entry : RMON_MIB::hostControlEntry {

        /*
             The total number of frames that were received by the probe
             and therefore not accounted for in the *StatsDropEvents, but
             that the probe chose not to count for this entry for
             whatever reason.  Most often, this event occurs when the
             
             
             
             probe is out of some resources and decides to shed load from
             this collection.
             
             This count does not include packets that were not counted
             because they had MAC-layer errors.
             
             Note that, unlike the dropEvents counter, this number is the
             exact number of frames dropped.
        */
        readonly attribute Counter32Type hostControlDroppedFrames;

        /*
             The value of sysUpTime when this control entry was last
             activated.  This can be used by the management station to
             ensure that the table has not been deleted and recreated
             between polls.
        */
        readonly attribute LastCreateTimeType hostControlCreateTime;
    };


    /*
             Contains the RMON-2 augmentations to RMON-1.
    */
    interface matrixControl2Entry : RMON_MIB::matrixControlEntry {

        /*
             The total number of frames that were received by the probe
             and therefore not accounted for in the *StatsDropEvents, but
             that the probe chose not to count for this entry for
             whatever reason.  Most often, this event occurs when the
             probe is out of some resources and decides to shed load from
             this collection.
             
             This count does not include packets that were not counted
             because they had MAC-layer errors.
             
             Note that, unlike the dropEvents counter, this number is the
             exact number of frames dropped.
        */
        readonly attribute Counter32Type matrixControlDroppedFrames;

        /*
             The value of sysUpTime when this control entry was last
             activated.  This can be used by the management station to
             ensure that the table has not been deleted and recreated
             between polls.
        */
        readonly attribute LastCreateTimeType matrixControlCreateTime;
    };


    /*
             Contains the RMON-2 augmentations to RMON-1.
    */
    interface channel2Entry : RMON_MIB::channelEntry {

        /*
             The total number of frames that were received by the probe
             and therefore not accounted for in the *StatsDropEvents, but
             that the probe chose not to count for this entry for
             whatever reason.  Most often, this event occurs when the
             probe is out of some resources and decides to shed load from
             this collection.
             
             This count does not include packets that were not counted
             because they had MAC-layer errors.
             
             Note that, unlike the dropEvents counter, this number is the
             exact number of frames dropped.
        */
        readonly attribute Counter32Type channelDroppedFrames;

        /*
             The value of sysUpTime when this control entry was last
             activated.  This can be used by the management station to
             ensure that the table has not been deleted and recreated
             between polls.
        */
        readonly attribute LastCreateTimeType channelCreateTime;
    };


    /*
             Provides a variable-length packet filter feature to the
             RMON-1 filter table.
    */
    interface filter2Entry : RMON_MIB::filterEntry {

        /*
             When this object is set to a non-zero value, the filter that
             it is associated with performs the following operations on
             every packet:
             
             1) If the packet doesn't match the protocol directory entry
                identified by this object, discard the packet and exit
                (i.e., discard the packet if it is not of the identified
                protocol).
             
             
             
             2) If the associated filterProtocolDirLocalIndex is non-zero
                and the packet doesn't match the protocol directory
                entry identified by that object, discard the packet and
                exit.
             3) If the packet matches, perform the regular filter
                algorithm as if the beginning of this named protocol is
                the beginning of the packet, potentially applying the
                filterOffset value to move further into the packet.
        */
        attribute FilterProtocolDirDataLocalIndexType filterProtocolDirDataLocalIndex;

        /*
             When this object is set to a non-zero value, the filter that
             it is associated with will discard the packet if the packet
             doesn't match this protocol directory entry.
        */
        attribute FilterProtocolDirLocalIndexType filterProtocolDirLocalIndex;
    };

    interface protocolDir : SNMPMgmt::SmiEntry {

        /*
             The value of sysUpTime at the time the protocol directory
             was last modified, either through insertions or deletions,
             or through modifications of the
             protocolDirAddressMapConfig, protocolDirHostConfig, or
             protocolDirMatrixConfig.
        */
        readonly attribute TimeStampType protocolDirLastChange;

        /*
             This table lists the protocols that this agent has the
             capability to decode and count.  There is one entry in this
             table for each such protocol.  These protocols represent
             different network-layer, transport-layer, and higher-layer
             
             
             
             protocols.  The agent should boot up with this table
             preconfigured with those protocols that it knows about and
             wishes to monitor.  Implementations are strongly encouraged to
             support protocols higher than the network layer (at least for
             the protocol distribution group), even for implementations
             that don't support the application-layer groups.
        */
        SNMPMgmt::SmiTableIterator get_protocolDirTable();
    };


    /*
             A conceptual row in the protocolDirTable.
             
             An example of the indexing of this entry is
             protocolDirLocalIndex.8.0.0.0.1.0.0.8.0.2.0.0, which is the
             encoding of a length of 8, followed by 8 subids encoding the
             protocolDirID of 1.2048, followed by a length of 2 and the
             2 subids encoding zero-valued parameters.
             
             Note that some combinations of index values may result in an
             index that exceeds 128 sub-identifiers in length, which exceeds
             the maximum for the SNMP protocol.  Implementations should take
             care to avoid such combinations.
    */
    interface protocolDirEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "protocolDirID protocolDirParameters";

        /*
             The locally arbitrary but unique identifier associated
             with this protocolDir entry.
             
             The value for each supported protocol must remain constant at
             least from one re-initialization of the entity's network
             management system to the next re-initialization, except that
             if a protocol is deleted and re-created, it must be re-created
             with a new value that has not been used since the last
             re-initialization.
             
             The specific value is meaningful only within a given SNMP
             entity.  A protocolDirLocalIndex must not be re-used until the
             next agent restart in the event that the protocol directory
             entry is deleted.
        */
        readonly attribute ProtocolDirLocalIndexType protocolDirLocalIndex;

        /*
             A textual description of the protocol encapsulation.
             A probe may choose to describe only a subset of the
             entire encapsulation (e.g., only the highest layer).
             
             This object is intended for human consumption only.
             
             This object may not be modified if the associated
             protocolDirStatus object is equal to active(1).
        */
        attribute ProtocolDirDescrType protocolDirDescr;

        /*
             This object describes 2 attributes of this protocol
             directory entry.
             
             The presence or absence of the 'extensible' bit describes
             whether this protocol directory entry can be extended
             by the user by creating protocol directory entries that are
             children of this protocol.
             
             An example of an entry that will often allow extensibility is
             
             
             
             'ip.udp'.  The probe may automatically populate some children
             of this node, such as 'ip.udp.snmp' and 'ip.udp.dns'.
             A probe administrator or user may also populate additional
             children via remote SNMP requests that create entries in this
             table.  When a child node is added for a protocol for which the
             probe has no built-in support extending a parent node (for
             which the probe does have built-in support),
             that child node is not extendable.  This is termed 'limited
             extensibility'.
             
             When a child node is added through this extensibility
             mechanism, the values of protocolDirLocalIndex and
             protocolDirType shall be assigned by the agent.
             
             The other objects in the entry will be assigned by the
             manager who is creating the new entry.
             
             This object also describes whether this agent can
             recognize addresses for this protocol, should it be a
             network-level protocol.  That is, while a probe may be able
             to recognize packets of a particular network-layer protocol
             and count them, it takes additional logic to be able to
             recognize the addresses in this protocol and to populate
             network-layer or application-layer tables with the addresses
             in this protocol.  If this bit is set, the agent will
             recognize network-layer addresses for this protocol and
             populate the network- and application-layer host and matrix
             tables with these protocols.
             
             Note that when an entry is created, the agent will supply
             values for the bits that match the capabilities of the agent
             with respect to this protocol.  Note that since row creations
             usually exercise the limited extensibility feature, these
             bits will usually be set to zero.
        */
        readonly attribute ProtocolDirTypeType protocolDirType;

        /*
             This object describes and configures the probe's support for
             address mapping for this protocol.  When the probe creates
             entries in this table for all protocols that it understands,
             
             
             
             it will set the entry to notSupported(1) if it doesn't have
             the capability to perform address mapping for the protocol or
             if this protocol is not a network-layer protocol.  When
             an entry is created in this table by a management operation as
             part of the limited extensibility feature, the probe must set
             this value to notSupported(1), because limited extensibility
             of the protocolDirTable does not extend to interpreting
             addresses of the extended protocols.
             
             If the value of this object is notSupported(1), the probe
             will not perform address mapping for this protocol and
             shall not allow this object to be changed to any other value.
             If the value of this object is supportedOn(3), the probe
             supports address mapping for this protocol and is configured
             to perform address mapping for this protocol for all
             addressMappingControlEntries and all interfaces.
             If the value of this object is supportedOff(2), the probe
             supports address mapping for this protocol but is configured
             to not perform address mapping for this protocol for any
             addressMappingControlEntries and all interfaces.
             Whenever this value changes from supportedOn(3) to
             supportedOff(2), the probe shall delete all related entries in
             the addressMappingTable.
        */
        attribute ProtocolDirAddressMapConfigType protocolDirAddressMapConfig;

        /*
             This object describes and configures the probe's support for
             the network-layer and application-layer host tables for this
             protocol.  When the probe creates entries in this table for
             all protocols that it understands, it will set the entry to
             notSupported(1) if it doesn't have the capability to track the
             nlHostTable for this protocol or if the alHostTable is
             implemented but doesn't have the capability to track this
             protocol.  Note that if the alHostTable is implemented, the
             probe may only support a protocol if it is supported in both
             the nlHostTable and the alHostTable.
             
             If the associated protocolDirType object has the
             addressRecognitionCapable bit set, then this is a network-
             layer protocol for which the probe recognizes addresses, and
             
             
             
             thus the probe will populate the nlHostTable and alHostTable
             with addresses it discovers for this protocol.
             
             If the value of this object is notSupported(1), the probe
             will not track the nlHostTable or alHostTable for this
             protocol and shall not allow this object to be changed to any
             other value.  If the value of this object is supportedOn(3),
             the probe supports tracking of the nlHostTable and alHostTable
             for this protocol and is configured to track both tables
             for this protocol for all control entries and all interfaces.
             If the value of this object is supportedOff(2), the probe
             supports tracking of the nlHostTable and alHostTable for this
             protocol but is configured to not track these tables
             for any control entries or interfaces.
             Whenever this value changes from supportedOn(3) to
             supportedOff(2), the probe shall delete all related entries in
             the nlHostTable and alHostTable.
             
             Note that since each alHostEntry references 2 protocol
             directory entries, one for the network address and one for the
             type of the highest protocol recognized, an entry will
             only be created in that table if this value is supportedOn(3)
             for both protocols.
        */
        attribute ProtocolDirHostConfigType protocolDirHostConfig;

        /*
             This object describes and configures the probe's support for
             the network-layer and application-layer matrix tables for this
             protocol.  When the probe creates entries in this table for
             all protocols that it understands, it will set the entry to
             notSupported(1) if it doesn't have the capability to track the
             nlMatrixTables for this protocol or if the alMatrixTables are
             implemented but don't have the capability to track this
             protocol.  Note that if the alMatrix tables are implemented,
             the probe may only support a protocol if it is supported in
             both of the nlMatrixTables and both of the
             alMatrixTables.
             
             If the associated protocolDirType object has the
             addressRecognitionCapable bit set, then this is a network-
             
             
             
             layer protocol for which the probe recognizes addresses, and
             thus the probe will populate both of the nlMatrixTables and
             both of the alMatrixTables with addresses it discovers for
             this protocol.
             
             If the value of this object is notSupported(1), the probe
             will not track either of the nlMatrixTables or the
             alMatrixTables for this protocol and shall not allow this
             object to be changed to any other value.  If the value of this
             object is supportedOn(3), the probe supports tracking of both
             of the nlMatrixTables and (if implemented) both of the
             alMatrixTables for this protocol and is configured to track
             these tables for this protocol for all control entries and all
             interfaces.  If the value of this object is supportedOff(2),
             the probe supports tracking of both of the nlMatrixTables and
             (if implemented) both of the alMatrixTables for this protocol
             but is configured to not track these tables for this
             protocol for any control entries or interfaces.
             Whenever this value changes from supportedOn(3) to
             supportedOff(2), the probe shall delete all related entries in
             the nlMatrixTables and the alMatrixTables.
             
             Note that since each alMatrixEntry references 2 protocol
             directory entries, one for the network address and one for the
             type of the highest protocol recognized, an entry will
             only be created in that table if this value is supportedOn(3)
             for both protocols.
        */
        attribute ProtocolDirMatrixConfigType protocolDirMatrixConfig;

        /*
             The entity that configured this entry and is
             therefore using the resources assigned to it.
        */
        attribute OwnerStringType protocolDirOwner;

        /*
             The status of this protocol directory entry.
             
             An entry may not exist in the active state unless all
             objects in the entry have an appropriate value.
             
             
             
             
             If this object is not equal to active(1), all associated
             entries in the nlHostTable, nlMatrixSDTable, nlMatrixDSTable,
             alHostTable, alMatrixSDTable, and alMatrixDSTable shall be
             deleted.
        */
        attribute RowStatusType protocolDirStatus;
    };

    interface protocolDist : SNMPMgmt::SmiEntry {

        /*
             Controls the setup of protocol type distribution statistics
             tables.
             
             Implementations are encouraged to add an entry per monitored
             interface upon initialization so that a default collection
             of protocol statistics is available.
             
             Rationale:
             This table controls collection of very basic statistics
             for any or all of the protocols detected on a given interface.
             An NMS can use this table to quickly determine bandwidth
             allocation utilized by different protocols.
             
             A media-specific statistics collection could also
             be configured (e.g., etherStats, trPStats) to easily obtain
             total frame, octet, and droppedEvents for the same
             interface.
        */
        SNMPMgmt::SmiTableIterator get_protocolDistControlTable();

        /*
             An entry is made in this table for every protocol in the
             protocolDirTable that has been seen in at least one packet.
             Counters are updated in this table for every protocol type
             that is encountered when parsing a packet, but no counters are
             
             
             
             updated for packets with MAC-layer errors.
             
             Note that if a protocolDirEntry is deleted, all associated
             entries in this table are removed.
        */
        SNMPMgmt::SmiTableIterator get_protocolDistStatsTable();
    };


    /*
             A conceptual row in the protocolDistControlTable.
             
             An example of the indexing of this entry is
             protocolDistControlDroppedFrames.7
    */
    interface protocolDistControlEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "protocolDistControlIndex";

        /*
             The source of data for the this protocol distribution.
             
             The statistics in this group reflect all packets
             on the local network segment attached to the
             identified interface.
             
             This object may not be modified if the associated
             protocolDistControlStatus object is equal to active(1).
        */
        attribute DataSourceType protocolDistControlDataSource;

        /*
             The total number of frames that were received by the probe
             and therefore not accounted for in the *StatsDropEvents, but
             that the probe chose not to count for this entry for
             whatever reason.  Most often, this event occurs when the probe
             is out of some resources and decides to shed load from this
             collection.
             
             This count does not include packets that were not counted
             because they had MAC-layer errors.
             
             
             
             Note that, unlike the dropEvents counter, this number is the
             exact number of frames dropped.
        */
        readonly attribute Counter32Type protocolDistControlDroppedFrames;

        /*
             The value of sysUpTime when this control entry was last
             activated.  This can be used by the management station to
             ensure that the table has not been deleted and recreated
             between polls.
        */
        readonly attribute LastCreateTimeType protocolDistControlCreateTime;

        /*
             The entity that configured this entry and is
             therefore using the resources assigned to it.
        */
        attribute OwnerStringType protocolDistControlOwner;

        /*
             The status of this row.
             
             An entry may not exist in the active state unless all
             objects in the entry have an appropriate value.
             
             If this object is not equal to active(1), all associated
             entries in the protocolDistStatsTable shall be deleted.
        */
        attribute RowStatusType protocolDistControlStatus;
    };


    /*
             A conceptual row in the protocolDistStatsTable.
             
             The index is composed of the protocolDistControlIndex of the
             associated protocolDistControlEntry, followed by the
             protocolDirLocalIndex of the associated protocol that this
             entry represents.  In other words, the index identifies the
             protocol distribution an entry is a part of and the
             particular protocol that it represents.
             
             An example of the indexing of this entry is
             protocolDistStatsPkts.1.18
    */
    interface protocolDistStatsEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "protocolDistControlIndex protocolDirLocalIndex";

        /*
             The number of packets of this protocol type received
             without errors.  Note that this is the number of
             link-layer packets, so if a single network-layer packet
             is fragmented into several link-layer frames, this counter
             is incremented several times.
        */
        readonly attribute ZeroBasedCounter32Type protocolDistStatsPkts;

        /*
             The number of octets in packets of this protocol type
             
             
             
             received since it was added to the protocolDistStatsTable
             (excluding framing bits, but including FCS octets), except for
             those octets in packets that contained errors.
             
             Note that this doesn't count just those octets in the
             particular protocol frames but includes the entire packet
             that contained the protocol.
        */
        readonly attribute ZeroBasedCounter32Type protocolDistStatsOctets;
    };

    interface addressMap : SNMPMgmt::SmiEntry {

        /*
             The number of times an address mapping entry has been
             inserted into the addressMapTable.  If an entry is inserted,
             then deleted, and then inserted, this counter will be
             incremented by 2.
             
             Note that the table size can be determined by subtracting
             addressMapDeletes from addressMapInserts.
        */
        readonly attribute Counter32Type addressMapInserts;

        /*
             The number of times an address mapping entry has been
             deleted from the addressMapTable (for any reason).  If
             an entry is deleted, then inserted, and then deleted, this
             counter will be incremented by 2.
             
             Note that the table size can be determined by subtracting
             addressMapDeletes from addressMapInserts.
        */
        readonly attribute Counter32Type addressMapDeletes;

        /*
             The maximum number of entries that are desired in the
             addressMapTable.  The probe will not create more than
             this number of entries in the table but may choose to create
             fewer entries in this table for any reason, including the lack
             of resources.
             
             If this object is set to a value less than the current number
             of entries, enough entries are chosen in an
             implementation-dependent manner and deleted so that the number
             of entries in the table equals the value of this object.
             
             If this value is set to -1, the probe may create any number
             of entries in this table.
             
             This object may be used to control how resources are allocated
             on the probe for the various RMON functions.
        */
        attribute AddressMapMaxDesiredEntriesType addressMapMaxDesiredEntries;

        /*
             A table to control the collection of mappings from network
             layer address to physical address to interface.
             
             Note that this is not like the typical RMON
             controlTable and dataTable in which each entry creates
             its own data table.  Each entry in this table enables the
             discovery of addresses on a new interface and the placement
             of address mappings into the central addressMapTable.
             
             Implementations are encouraged to add an entry per monitored
             interface upon initialization so that a default collection
             of address mappings is available.
        */
        SNMPMgmt::SmiTableIterator get_addressMapControlTable();

        /*
             A table of mappings from network layer address to physical
             address to interface.
             
             The probe will add entries to this table based on the source
             MAC and network addresses seen in packets without MAC-level
             errors.  The probe will populate this table for all protocols
             in the protocol directory table whose value of
             protocolDirAddressMapConfig is equal to supportedOn(3), and
             will delete any entries whose protocolDirEntry is deleted or
             has a protocolDirAddressMapConfig value of supportedOff(2).
        */
        SNMPMgmt::SmiTableIterator get_addressMapTable();
    };


    /*
             A conceptual row in the addressMapControlTable.
             
             An example of the indexing of this entry is
             addressMapControlDroppedFrames.1
    */
    interface addressMapControlEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "addressMapControlIndex";

        /*
             The source of data for this addressMapControlEntry.
        */
        attribute DataSourceType addressMapControlDataSource;

        /*
             The total number of frames that were received by the probe
             and therefore not accounted for in the *StatsDropEvents, but
             that the probe chose not to count for this entry for
             whatever reason.  Most often, this event occurs when the probe
             is out of some resources and decides to shed load from this
             collection.
             
             This count does not include packets that were not counted
             because they had MAC-layer errors.
             
             Note that, unlike the dropEvents counter, this number is the
             exact number of frames dropped.
        */
        readonly attribute Counter32Type addressMapControlDroppedFrames;

        /*
             The entity that configured this entry and is
             therefore using the resources assigned to it.
        */
        attribute OwnerStringType addressMapControlOwner;

        /*
             The status of this addressMap control entry.
             
             An entry may not exist in the active state unless all
             objects in the entry have an appropriate value.
             
             If this object is not equal to active(1), all associated
             entries in the addressMapTable shall be deleted.
        */
        attribute RowStatusType addressMapControlStatus;
    };


    /*
             A conceptual row in the addressMapTable.
             
             The protocolDirLocalIndex in the index identifies the network
             layer protocol of the addressMapNetworkAddress.
             
             
             
             
             An example of the indexing of this entry is
             addressMapSource.783495.18.4.128.2.6.6.11.1.3.6.1.2.1.2.2.1.1.1.
             
             Note that some combinations of index values may result in an
             index that exceeds 128 sub-identifiers in length, which exceeds
             the maximum for the SNMP protocol.  Implementations should take
             care to avoid such combinations.
    */
    interface addressMapEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "addressMapTimeMark protocolDirLocalIndex addressMapNetworkAddress addressMapSource";

        /*
             The last source physical address on which the associated
             network address was seen.  If the protocol of the associated
             network address was encapsulated inside of a network-level or
             higher protocol, this will be the address of the next-lower
             protocol with the addressRecognitionCapable bit enabled and
             will be formatted as specified for that protocol.
        */
        readonly attribute ASN1_OctetString addressMapPhysicalAddress;

        /*
             The value of sysUpTime at the time this entry was last
             created or the values of the physical address changed.
             
             
             
             
             This can be used to help detect duplicate address problems, in
             which case this object will be updated frequently.
        */
        readonly attribute TimeStampType addressMapLastChange;
    };

    interface nlHost : SNMPMgmt::SmiEntry {

        /*
             A list of higher-layer (i.e., non-MAC) host table control
             entries.
             
             These entries will enable the collection of the network- and
             application-level host tables indexed by network addresses.
             Both the network- and application-level host tables are
             controlled by this table so that they will both be created
             and deleted at the same time, further increasing the ease with
             which they can be implemented as a single datastore.  (Note that
             if an implementation stores application-layer host records in
             memory, it can derive network-layer host records from them.)
             
             Entries in the nlHostTable will be created on behalf of each
             entry in this table.  Additionally, if this probe implements
             the alHostTable, entries in the alHostTable will be created on
             behalf of each entry in this table.
             
             Implementations are encouraged to add an entry per monitored
             interface upon initialization so that a default collection
             of host statistics is available.
        */
        SNMPMgmt::SmiTableIterator get_hlHostControlTable();

        /*
             A collection of statistics for a particular network layer
             address that has been discovered on an interface of this
             device.
             
             The probe will populate this table for all network layer
             protocols in the protocol directory table whose value of
             protocolDirHostConfig is equal to supportedOn(3), and
             will delete any entries whose protocolDirEntry is deleted or
             has a protocolDirHostConfig value of supportedOff(2).
             
             The probe will add to this table all addresses seen
             as the source or destination address in all packets with no
             MAC errors, and will increment octet and packet counts in the
             table for all packets with no MAC errors.
        */
        SNMPMgmt::SmiTableIterator get_nlHostTable();
    };


    /*
             A conceptual row in the hlHostControlTable.
             
             An example of the indexing of this entry is
             
             
             
             hlHostControlNlDroppedFrames.1
    */
    interface hlHostControlEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "hlHostControlIndex";

        /*
             The source of data for the associated host tables.
             
             The statistics in this group reflect all packets
             on the local network segment attached to the
             identified interface.
             
             This object may not be modified if the associated
             hlHostControlStatus object is equal to active(1).
        */
        attribute DataSourceType hlHostControlDataSource;

        /*
             The total number of frames that were received by the probe
             and therefore not accounted for in the *StatsDropEvents, but
             that the probe chose not to count for the associated
             nlHost entries for whatever reason.  Most often, this event
             occurs when the probe is out of some resources and decides to
             shed load from this collection.
             
             This count does not include packets that were not counted
             because they had MAC-layer errors.
             
             Note that if the nlHostTable is inactive because no protocols
             are enabled in the protocol directory, this value should be 0.
             
             Note that, unlike the dropEvents counter, this number is the
             exact number of frames dropped.
        */
        readonly attribute Counter32Type hlHostControlNlDroppedFrames;

        /*
             The number of times an nlHost entry has been
             inserted into the nlHost table.  If an entry is inserted, then
             deleted, and then inserted, this counter will be incremented
             by 2.
             
             To allow for efficient implementation strategies, agents may
             delay updating this object for short periods of time.  For
             example, an implementation strategy may allow internal
             data structures to differ from those visible via SNMP for
             short periods of time.  This counter may reflect the internal
             data structures for those short periods of time.
             
             Note that the table size can be determined by subtracting
             hlHostControlNlDeletes from hlHostControlNlInserts.
        */
        readonly attribute Counter32Type hlHostControlNlInserts;

        /*
             The number of times an nlHost entry has been
             
             
             
             deleted from the nlHost table (for any reason).  If an entry
             is deleted, then inserted, and then deleted, this counter will
             be incremented by 2.
             
             To allow for efficient implementation strategies, agents may
             delay updating this object for short periods of time.  For
             example, an implementation strategy may allow internal
             data structures to differ from those visible via SNMP for
             short periods of time.  This counter may reflect the internal
             data structures for those short periods of time.
             
             Note that the table size can be determined by subtracting
             hlHostControlNlDeletes from hlHostControlNlInserts.
        */
        readonly attribute Counter32Type hlHostControlNlDeletes;

        /*
             The maximum number of entries that are desired in the
             nlHostTable on behalf of this control entry.  The probe will
             not create more than this number of associated entries in the
             table but may choose to create fewer entries in this table
             for any reason, including the lack of resources.
             
             If this object is set to a value less than the current number
             of entries, enough entries are chosen in an
             implementation-dependent manner and deleted so that the number
             of entries in the table equals the value of this object.
             
             If this value is set to -1, the probe may create any number
             of entries in this table.  If the associated
             hlHostControlStatus object is equal to 'active', this
             object may not be modified.
             
             This object may be used to control how resources are allocated
             on the probe for the various RMON functions.
        */
        attribute HlHostControlNlMaxDesiredEntriesType hlHostControlNlMaxDesiredEntries;

        /*
             The total number of frames that were received by the probe
             and therefore not accounted for in the *StatsDropEvents, but
             that the probe chose not to count for the associated
             
             
             
             alHost entries for whatever reason.  Most often, this event
             occurs when the probe is out of some resources and decides to
             shed load from this collection.
             
             This count does not include packets that were not counted
             because they had MAC-layer errors.
             
             Note that if the alHostTable is not implemented or is inactive
             because no protocols are enabled in the protocol directory,
             this value should be 0.
             
             Note that, unlike the dropEvents counter, this number is the
             exact number of frames dropped.
        */
        readonly attribute Counter32Type hlHostControlAlDroppedFrames;

        /*
             The number of times an alHost entry has been
             inserted into the alHost table.  If an entry is inserted, then
             deleted, and then inserted, this counter will be incremented
             by 2.
             
             To allow for efficient implementation strategies, agents may
             delay updating this object for short periods of time.  For
             example, an implementation strategy may allow internal
             data structures to differ from those visible via SNMP for
             short periods of time.  This counter may reflect the internal
             data structures for those short periods of time.
             
             Note that the table size can be determined by subtracting
             hlHostControlAlDeletes from hlHostControlAlInserts.
        */
        readonly attribute Counter32Type hlHostControlAlInserts;

        /*
             The number of times an alHost entry has been
             deleted from the alHost table (for any reason).  If an entry
             is deleted, then inserted, and then deleted, this counter will
             be incremented by 2.
             
             To allow for efficient implementation strategies, agents may
             delay updating this object for short periods of time.  For
             
             
             
             example, an implementation strategy may allow internal
             data structures to differ from those visible via SNMP for
             short periods of time.  This counter may reflect the internal
             data structures for those short periods of time.
             
             Note that the table size can be determined by subtracting
             hlHostControlAlDeletes from hlHostControlAlInserts.
        */
        readonly attribute Counter32Type hlHostControlAlDeletes;

        /*
             The maximum number of entries that are desired in the alHost
             table on behalf of this control entry.  The probe will not
             create more than this number of associated entries in the
             table but may choose to create fewer entries in this table
             for any reason, including the lack of resources.
             
             If this object is set to a value less than the current number
             of entries, enough entries are chosen in an
             implementation-dependent manner and deleted so that the number
             of entries in the table equals the value of this object.
             
             If this value is set to -1, the probe may create any number
             of entries in this table.  If the associated
             hlHostControlStatus object is equal to 'active', this
             object may not be modified.
             
             This object may be used to control how resources are allocated
             on the probe for the various RMON functions.
        */
        attribute HlHostControlAlMaxDesiredEntriesType hlHostControlAlMaxDesiredEntries;

        /*
             The entity that configured this entry and is
             therefore using the resources assigned to it.
        */
        attribute OwnerStringType hlHostControlOwner;

        /*
             The status of this hlHostControlEntry.
             
             An entry may not exist in the active state unless all
             objects in the entry have an appropriate value.
             
             If this object is not equal to active(1), all associated
             entries in the nlHostTable and alHostTable shall be deleted.
        */
        attribute RowStatusType hlHostControlStatus;
    };


    /*
             A conceptual row in the nlHostTable.
             
             The hlHostControlIndex value in the index identifies the
             hlHostControlEntry on whose behalf this entry was created.
             The protocolDirLocalIndex value in the index identifies the
             network layer protocol of the nlHostAddress.
             
             An example of the indexing of this entry is
             nlHostOutPkts.1.783495.18.4.128.2.6.6.
             
             Note that some combinations of index values may result in an
             index that exceeds 128 sub-identifiers in length, which exceeds
             the maximum for the SNMP protocol.  Implementations should take
             
             
             
             care to avoid such combinations.
    */
    interface nlHostEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "hlHostControlIndex nlHostTimeMark protocolDirLocalIndex nlHostAddress";

        /*
             The number of packets without errors transmitted to
             
             
             
             this address since it was added to the nlHostTable.  Note that
             this is the number of link-layer packets, so if a single
             network-layer packet is fragmented into several link-layer
             frames, this counter is incremented several times.
        */
        readonly attribute ZeroBasedCounter32Type nlHostInPkts;

        /*
             The number of packets without errors transmitted by
             this address since it was added to the nlHostTable.  Note that
             this is the number of link-layer packets, so if a single
             network-layer packet is fragmented into several link-layer
             frames, this counter is incremented several times.
        */
        readonly attribute ZeroBasedCounter32Type nlHostOutPkts;

        /*
             The number of octets transmitted to this address
             since it was added to the nlHostTable (excluding
             framing bits, but including FCS octets), excluding
             octets in packets that contained errors.
             
             Note that this doesn't count just those octets in the particular
             protocol frames but includes the entire packet that contained
             the protocol.
        */
        readonly attribute ZeroBasedCounter32Type nlHostInOctets;

        /*
             The number of octets transmitted by this address
             since it was added to the nlHostTable (excluding
             framing bits, but including FCS octets), excluding
             octets in packets that contained errors.
             
             Note that this doesn't count just those octets in the particular
             protocol frames but includes the entire packet that contained
             the protocol.
        */
        readonly attribute ZeroBasedCounter32Type nlHostOutOctets;

        /*
             The number of packets without errors transmitted by this
             address that were directed to any MAC broadcast addresses
             or to any MAC multicast addresses since this host was
             added to the nlHostTable.  Note that this is the number of
             link-layer packets, so if a single network-layer packet is
             fragmented into several link-layer frames, this counter is
             incremented several times.
        */
        readonly attribute ZeroBasedCounter32Type nlHostOutMacNonUnicastPkts;

        /*
             The value of sysUpTime when this entry was last activated.
             This can be used by the management station to ensure that the
             entry has not been deleted and recreated between polls.
        */
        readonly attribute LastCreateTimeType nlHostCreateTime;
    };

    interface nlMatrix : SNMPMgmt::SmiEntry {

        /*
             A list of higher-layer (i.e., non-MAC) matrix control entries.
             
             These entries will enable the collection of the network- and
             application-level matrix tables containing conversation
             statistics indexed by pairs of network addresses.
             Both the network- and application-level matrix tables are
             controlled by this table so that they will both be created
             and deleted at the same time, further increasing the ease with
             which they can be implemented as a single datastore.  (Note that
             if an implementation stores application-layer matrix records
             
             
             
             in memory, it can derive network-layer matrix records from
             them.)
             
             Entries in the nlMatrixSDTable and nlMatrixDSTable will be
             created on behalf of each entry in this table.  Additionally,
             if this probe implements the alMatrix tables, entries in the
             alMatrix tables will be created on behalf of each entry in
             this table.
        */
        SNMPMgmt::SmiTableIterator get_hlMatrixControlTable();

        /*
             A list of traffic matrix entries that collect statistics for
             conversations between two network-level addresses.  This table
             is indexed first by the source address and then by the
             destination address to make it convenient to collect all
             conversations from a particular address.
             
             The probe will populate this table for all network layer
             protocols in the protocol directory table whose value of
             protocolDirMatrixConfig is equal to supportedOn(3), and
             will delete any entries whose protocolDirEntry is deleted or
             has a protocolDirMatrixConfig value of supportedOff(2).
             
             The probe will add to this table all pairs of addresses
             seen in all packets with no MAC errors and will increment
             octet and packet counts in the table for all packets with no
             MAC errors.
             
             Further, this table will only contain entries that have a
             corresponding entry in the nlMatrixDSTable with the same
             source address and destination address.
        */
        SNMPMgmt::SmiTableIterator get_nlMatrixSDTable();

        /*
             A list of traffic matrix entries that collect statistics for
             conversations between two network-level addresses.  This table
             is indexed first by the destination address and then by the
             source address to make it convenient to collect all
             conversations to a particular address.
             
             The probe will populate this table for all network layer
             protocols in the protocol directory table whose value of
             protocolDirMatrixConfig is equal to supportedOn(3), and
             will delete any entries whose protocolDirEntry is deleted or
             has a protocolDirMatrixConfig value of supportedOff(2).
             
             The probe will add to this table all pairs of addresses
             seen in all packets with no MAC errors and will increment
             octet and packet counts in the table for all packets with no
             MAC errors.
             
             Further, this table will only contain entries that have a
             corresponding entry in the nlMatrixSDTable with the same
             source address and destination address.
        */
        SNMPMgmt::SmiTableIterator get_nlMatrixDSTable();

        /*
             A set of parameters that control the creation of a
             report of the top N matrix entries according to
             a selected metric.
        */
        SNMPMgmt::SmiTableIterator get_nlMatrixTopNControlTable();

        /*
             A set of statistics for those network-layer matrix entries
             
             
             
             that have counted the highest number of octets or packets.
        */
        SNMPMgmt::SmiTableIterator get_nlMatrixTopNTable();
    };


    /*
             A conceptual row in the hlMatrixControlTable.
             
             An example of indexing of this entry is
             hlMatrixControlNlDroppedFrames.1
    */
    interface hlMatrixControlEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "hlMatrixControlIndex";

        /*
             The source of the data for the associated matrix tables.
             
             The statistics in this group reflect all packets
             on the local network segment attached to the
             identified interface.
             
             This object may not be modified if the associated
             hlMatrixControlStatus object is equal to active(1).
        */
        attribute DataSourceType hlMatrixControlDataSource;

        /*
             The total number of frames that were received by the probe
             and therefore not accounted for in the *StatsDropEvents, but
             that the probe chose not to count for this entry for
             whatever reason.  Most often, this event occurs when the probe
             is out of some resources and decides to shed load from this
             collection.
             
             This count does not include packets that were not counted
             because they had MAC-layer errors.
             
             Note that if the nlMatrixTables are inactive because no
             protocols are enabled in the protocol directory, this value
             should be 0.
             
             Note that, unlike the dropEvents counter, this number is the
             exact number of frames dropped.
        */
        readonly attribute Counter32Type hlMatrixControlNlDroppedFrames;

        /*
             The number of times an nlMatrix entry has been
             inserted into the nlMatrix tables.  If an entry is inserted,
             
             
             
             then deleted, and then inserted, this counter will be
             incremented by 2.  The addition of a conversation into both
             the nlMatrixSDTable and nlMatrixDSTable shall be counted as
             two insertions (even though every addition into one table must
             be accompanied by an insertion into the other).
             
             To allow for efficient implementation strategies, agents may
             delay updating this object for short periods of time.  For
             example, an implementation strategy may allow internal
             data structures to differ from those visible via SNMP for
             short periods of time.  This counter may reflect the internal
             data structures for those short periods of time.
             
             Note that the sum of then nlMatrixSDTable and nlMatrixDSTable
             sizes can be determined by subtracting
             hlMatrixControlNlDeletes from hlMatrixControlNlInserts.
        */
        readonly attribute Counter32Type hlMatrixControlNlInserts;

        /*
             The number of times an nlMatrix entry has been
             deleted from the nlMatrix tables (for any reason).  If an
             entry is deleted, then inserted, and then deleted, this
             counter will be incremented by 2.  The deletion of a
             conversation from both the nlMatrixSDTable and nlMatrixDSTable
             shall be counted as two deletions (even though every deletion
             from one table must be accompanied by a deletion from the
             other).
             
             To allow for efficient implementation strategies, agents may
             delay updating this object for short periods of time.  For
             example, an implementation strategy may allow internal
             data structures to differ from those visible via SNMP for
             short periods of time.  This counter may reflect the internal
             data structures for those short periods of time.
             
             Note that the table size can be determined by subtracting
             hlMatrixControlNlDeletes from hlMatrixControlNlInserts.
        */
        readonly attribute Counter32Type hlMatrixControlNlDeletes;

        /*
             The maximum number of entries that are desired in the
             nlMatrix tables on behalf of this control entry.  The probe
             will not create more than this number of associated entries in
             the table but may choose to create fewer entries in this
             table for any reason, including the lack of resources.
             
             If this object is set to a value less than the current number
             of entries, enough entries are chosen in an
             implementation-dependent manner and deleted so that the number
             of entries in the table equals the value of this object.
             
             If this value is set to -1, the probe may create any number
             of entries in this table.  If the associated
             hlMatrixControlStatus object is equal to 'active', this
             object may not be modified.
             
             This object may be used to control how resources are allocated
             on the probe for the various RMON functions.
        */
        attribute HlMatrixControlNlMaxDesiredEntriesType hlMatrixControlNlMaxDesiredEntries;

        /*
             The total number of frames that were received by the probe
             and therefore not accounted for in the *StatsDropEvents, but
             that the probe chose not to count for this entry for
             whatever reason.  Most often, this event occurs when the probe
             is out of some resources and decides to shed load from this
             collection.
             
             This count does not include packets that were not counted
             because they had MAC-layer errors.
             
             Note that if the alMatrixTables are not implemented or are
             inactive because no protocols are enabled in the protocol
             directory, this value should be 0.
             
             Note that, unlike the dropEvents counter, this number is the
             exact number of frames dropped.
        */
        readonly attribute Counter32Type hlMatrixControlAlDroppedFrames;

        /*
             The number of times an alMatrix entry has been
             inserted into the alMatrix tables.  If an entry is inserted,
             then deleted, and then inserted, this counter will be
             incremented by 2.  The addition of a conversation into both
             the alMatrixSDTable and alMatrixDSTable shall be counted as
             two insertions (even though every addition into one table must
             be accompanied by an insertion into the other).
             
             To allow for efficient implementation strategies, agents may
             delay updating this object for short periods of time.  For
             example, an implementation strategy may allow internal
             data structures to differ from those visible via SNMP for
             short periods of time.  This counter may reflect the internal
             data structures for those short periods of time.
             
             Note that the table size can be determined by subtracting
             hlMatrixControlAlDeletes from hlMatrixControlAlInserts.
        */
        readonly attribute Counter32Type hlMatrixControlAlInserts;

        /*
             The number of times an alMatrix entry has been
             deleted from the alMatrix tables.  If an entry is deleted,
             then inserted, and then deleted, this counter will be
             incremented by 2.  The deletion of a conversation from both
             the alMatrixSDTable and alMatrixDSTable shall be counted as
             two deletions (even though every deletion from one table must
             be accompanied by a deletion from the other).
             
             To allow for efficient implementation strategies, agents may
             delay updating this object for short periods of time.  For
             example, an implementation strategy may allow internal
             data structures to differ from those visible via SNMP for
             short periods of time.  This counter may reflect the internal
             data structures for those short periods of time.
             
             Note that the table size can be determined by subtracting
             hlMatrixControlAlDeletes from hlMatrixControlAlInserts.
        */
        readonly attribute Counter32Type hlMatrixControlAlDeletes;

        /*
             The maximum number of entries that are desired in the
             alMatrix tables on behalf of this control entry.  The probe
             will not create more than this number of associated entries in
             the table but may choose to create fewer entries in this
             table for any reason, including the lack of resources.
             
             If this object is set to a value less than the current number
             of entries, enough entries are chosen in an
             implementation-dependent manner and deleted so that the number
             of entries in the table equals the value of this object.
             
             If this value is set to -1, the probe may create any number
             of entries in this table.  If the associated
             hlMatrixControlStatus object is equal to 'active', this
             object may not be modified.
             
             This object may be used to control how resources are allocated
             on the probe for the various RMON functions.
        */
        attribute HlMatrixControlAlMaxDesiredEntriesType hlMatrixControlAlMaxDesiredEntries;

        /*
             The entity that configured this entry and is
             therefore using the resources assigned to it.
        */
        attribute OwnerStringType hlMatrixControlOwner;

        /*
             The status of this hlMatrixControlEntry.
             
             An entry may not exist in the active state unless all
             objects in the entry have an appropriate value.
             
             If this object is not equal to active(1), all
             associated entries in the nlMatrixSDTable,
             nlMatrixDSTable, alMatrixSDTable, and alMatrixDSTable
             shall be deleted by the agent.
        */
        attribute RowStatusType hlMatrixControlStatus;
    };


    /*
             A conceptual row in the nlMatrixSDTable.
             
             The hlMatrixControlIndex value in the index identifies the
             hlMatrixControlEntry on whose behalf this entry was created.
             The protocolDirLocalIndex value in the index identifies the
             network-layer protocol of the nlMatrixSDSourceAddress and
             nlMatrixSDDestAddress.
             
             An example of the indexing of this table is
             nlMatrixSDPkts.1.783495.18.4.128.2.6.6.4.128.2.6.7.
             
             Note that some combinations of index values may result in an
             index that exceeds 128 sub-identifiers in length, which exceeds
             the maximum for the SNMP protocol.  Implementations should take
             care to avoid such combinations.
    */
    interface nlMatrixSDEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "hlMatrixControlIndex nlMatrixSDTimeMark protocolDirLocalIndex nlMatrixSDSourceAddress nlMatrixSDDestAddress";

        /*
             The number of packets without errors transmitted from the
             source address to the destination address since this entry was
             added to the nlMatrixSDTable.  Note that this is the number of
             link-layer packets, so if a single network-layer packet is
             fragmented into several link-layer frames, this counter is
             incremented several times.
        */
        readonly attribute ZeroBasedCounter32Type nlMatrixSDPkts;

        /*
             The number of octets transmitted from the source address to
             the destination address since this entry was added to the
             nlMatrixSDTable (excluding framing bits, but
             including FCS octets), excluding octets in packets that
             contained errors.
             
             Note that this doesn't count just those octets in the particular
             protocol frames but includes the entire packet that contained
             the protocol.
        */
        readonly attribute ZeroBasedCounter32Type nlMatrixSDOctets;

        /*
             The value of sysUpTime when this entry was last activated.
             This can be used by the management station to ensure that the
             entry has not been deleted and recreated between polls.
        */
        readonly attribute LastCreateTimeType nlMatrixSDCreateTime;
    };


    /*
             A conceptual row in the nlMatrixDSTable.
             
             The hlMatrixControlIndex value in the index identifies the
             hlMatrixControlEntry on whose behalf this entry was created.
             The protocolDirLocalIndex value in the index identifies the
             network-layer protocol of the nlMatrixDSSourceAddress and
             nlMatrixDSDestAddress.
             
             An example of the indexing of this table is
             nlMatrixDSPkts.1.783495.18.4.128.2.6.7.4.128.2.6.6.
             
             Note that some combinations of index values may result in an
             index that exceeds 128 sub-identifiers in length, which exceeds
             the maximum for the SNMP protocol.  Implementations should take
             care to avoid such combinations.
    */
    interface nlMatrixDSEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "hlMatrixControlIndex nlMatrixDSTimeMark protocolDirLocalIndex nlMatrixDSDestAddress nlMatrixDSSourceAddress";

        /*
             The number of packets without errors transmitted from the
             source address to the destination address since this entry was
             added to the nlMatrixDSTable.  Note that this is the number of
             link-layer packets, so if a single network-layer packet is
             fragmented into several link-layer frames, this counter is
             incremented several times.
        */
        readonly attribute ZeroBasedCounter32Type nlMatrixDSPkts;

        /*
             The number of octets transmitted from the source address
             to the destination address since this entry was added to the
             nlMatrixDSTable (excluding framing bits, but
             including FCS octets), excluding octets in packets that
             contained errors.
             
             Note that this doesn't count just those octets in the particular
             protocol frames but includes the entire packet that contained
             the protocol.
        */
        readonly attribute ZeroBasedCounter32Type nlMatrixDSOctets;

        /*
             The value of sysUpTime when this entry was last activated.
             This can be used by the management station to ensure that the
             entry has not been deleted and recreated between polls.
        */
        readonly attribute LastCreateTimeType nlMatrixDSCreateTime;
    };


    /*
             A conceptual row in the nlMatrixTopNControlTable.
             
             An example of the indexing of this table is
             nlMatrixTopNControlDuration.3
    */
    interface nlMatrixTopNControlEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "nlMatrixTopNControlIndex";

        /*
             The nlMatrix[SD/DS] table for which a topN report will be
             prepared on behalf of this entry.  The nlMatrix[SD/DS] table
             is identified by the value of the hlMatrixControlIndex
             for that table - that value is used here to identify the
             particular table.
             
             This object may not be modified if the associated
             nlMatrixTopNControlStatus object is equal to active(1).
        */
        attribute NlMatrixTopNControlMatrixIndexType nlMatrixTopNControlMatrixIndex;

        /*
             The variable for each nlMatrix[SD/DS] entry that the
             nlMatrixTopNEntries are sorted by, as well as a control
             for the table that the results will be reported in.
             
             This object may not be modified if the associated
             nlMatrixTopNControlStatus object is equal to active(1).
             
             If this value is less than or equal to 2, when the report
             is prepared, entries are created in the nlMatrixTopNTable
             associated with this object.
             If this value is greater than or equal to 3, when the report
             is prepared, entries are created in the
             nlMatrixTopNHighCapacityTable associated with this object.
        */
        attribute NlMatrixTopNControlRateBaseType nlMatrixTopNControlRateBase;

        /*
             The number of seconds left in the report currently
             being collected.  When this object is modified by
             the management station, a new collection is started,
             possibly aborting a currently running report.  The
             new value is used as the requested duration of this
             
             
             
             report and is immediately loaded into the associated
             nlMatrixTopNControlDuration object.
             
             When the report finishes, the probe will automatically
             start another collection with the same initial value
             of nlMatrixTopNControlTimeRemaining.  Thus, the management
             station may simply read the resulting reports repeatedly,
             checking the startTime and duration each time to ensure that a
             report was not missed or that the report parameters were not
             changed.
             
             While the value of this object is non-zero, it decrements
             by one per second until it reaches zero.  At the time
             that this object decrements to zero, the report is made
             accessible in the nlMatrixTopNTable, overwriting any report
             that may be there.
             
             When this object is modified by the management station, any
             associated entries in the nlMatrixTopNTable shall be deleted.
             
             (Note that this is a different algorithm than the one used
             in the hostTopNTable).
        */
        attribute NlMatrixTopNControlTimeRemainingType nlMatrixTopNControlTimeRemaining;

        /*
             The number of reports that have been generated by this entry.
        */
        readonly attribute Counter32Type nlMatrixTopNControlGeneratedReports;

        /*
             The number of seconds that this report has collected
             during the last sampling interval.
             
             When the associated nlMatrixTopNControlTimeRemaining object is
             set, this object shall be set by the probe to the
             same value and shall not be modified until the next
             time the nlMatrixTopNControlTimeRemaining is set.
             
             This value shall be zero if no reports have been
             requested for this nlMatrixTopNControlEntry.
        */
        readonly attribute ASN1_Integer nlMatrixTopNControlDuration;

        /*
             The maximum number of matrix entries requested for this report.
             
             When this object is created or modified, the probe
             should set nlMatrixTopNControlGrantedSize as closely to this
             object as possible for the particular probe
             implementation and available resources.
        */
        attribute NlMatrixTopNControlRequestedSizeType nlMatrixTopNControlRequestedSize;

        /*
             The maximum number of matrix entries in this report.
             
             When the associated nlMatrixTopNControlRequestedSize object is
             created or modified, the probe should set this
             object as closely to the requested value as
             possible for the particular implementation and
             available resources.  The probe must not lower this
             value except as a side-effect of a set to the associated
             nlMatrixTopNControlRequestedSize object.
             
             If the value of nlMatrixTopNControlRateBase is equal to
             nlMatrixTopNPkts, when the next topN report is generated,
             matrix entries with the highest value of nlMatrixTopNPktRate
             shall be placed in this table in decreasing order of this rate
             until there is no more room or until there are no more
             matrix entries.
             
             If the value of nlMatrixTopNControlRateBase is equal to
             nlMatrixTopNOctets, when the next topN report is generated,
             matrix entries with the highest value of nlMatrixTopNOctetRate
             shall be placed in this table in decreasing order of this rate
             until there is no more room or until there are no more
             matrix entries.
             
             It is an implementation-specific matter how entries with the
             same value of nlMatrixTopNPktRate or nlMatrixTopNOctetRate are
             sorted.  It is also an implementation-specific matter as to
             
             
             
             whether zero-valued entries are available.
        */
        readonly attribute NlMatrixTopNControlGrantedSizeType nlMatrixTopNControlGrantedSize;

        /*
             The value of sysUpTime when this topN report was
             last started.  In other words, this is the time that
             the associated nlMatrixTopNControlTimeRemaining object was
             modified to start the requested report or the time
             the report was last automatically (re)started.
             
             This object may be used by the management station to
             determine whether a report was missed.
        */
        readonly attribute TimeStampType nlMatrixTopNControlStartTime;

        /*
             The entity that configured this entry and is
             therefore using the resources assigned to it.
        */
        attribute OwnerStringType nlMatrixTopNControlOwner;

        /*
             The status of this nlMatrixTopNControlEntry.
             
             An entry may not exist in the active state unless all
             objects in the entry have an appropriate value.
             
             If this object is not equal to active(1), all
             associated entries in the nlMatrixTopNTable shall be deleted
             by the agent.
        */
        attribute RowStatusType nlMatrixTopNControlStatus;
    };


    /*
             A conceptual row in the nlMatrixTopNTable.
             
             The nlMatrixTopNControlIndex value in the index identifies the
             nlMatrixTopNControlEntry on whose behalf this entry was
             created.
             
             An example of the indexing of this table is
             nlMatrixTopNPktRate.3.10
    */
    interface nlMatrixTopNEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "nlMatrixTopNControlIndex nlMatrixTopNIndex";

        /*
             The protocolDirLocalIndex of the network-layer protocol of
             this entry's network address.
        */
        readonly attribute NlMatrixTopNProtocolDirLocalIndexType nlMatrixTopNProtocolDirLocalIndex;

        /*
             The network-layer address of the source host in this
             conversation.
             
             This is represented as an octet string with
             specific semantics and length as identified
             by the associated nlMatrixTopNProtocolDirLocalIndex.
             
             For example, if the protocolDirLocalIndex indicates an
             encapsulation of IP, this object is encoded as a length
             octet of 4, followed by the 4 octets of the IP address,
             in network byte order.
        */
        readonly attribute NlMatrixTopNSourceAddressType nlMatrixTopNSourceAddress;

        /*
             The network-layer address of the destination host in this
             conversation.
             
             This is represented as an octet string with
             specific semantics and length as identified
             by the associated nlMatrixTopNProtocolDirLocalIndex.
             
             For example, if the nlMatrixTopNProtocolDirLocalIndex
             indicates an encapsulation of IP, this object is encoded as a
             length octet of 4, followed by the 4 octets of the IP address,
             in network byte order.
        */
        readonly attribute NlMatrixTopNDestAddressType nlMatrixTopNDestAddress;

        /*
             The number of packets seen from the source host
             to the destination host during this sampling interval, counted
             using the rules for counting the nlMatrixSDPkts object.
             If the value of nlMatrixTopNControlRateBase is
             nlMatrixTopNPkts, this variable will be used to sort this
             report.
        */
        readonly attribute Gauge32Type nlMatrixTopNPktRate;

        /*
             The number of packets seen from the destination host to the
             source host during this sampling interval, counted
             using the rules for counting the nlMatrixSDPkts object.  (Note
             that the corresponding nlMatrixSDPkts object selected is the
             one whose source address is equal to nlMatrixTopNDestAddress
             and whose destination address is equal to
             nlMatrixTopNSourceAddress.)
             
             Note that if the value of nlMatrixTopNControlRateBase is equal
             to nlMatrixTopNPkts, the sort of topN entries is based
             entirely on nlMatrixTopNPktRate, and not on the value of this
             object.
        */
        readonly attribute Gauge32Type nlMatrixTopNReversePktRate;

        /*
             The number of octets seen from the source host
             to the destination host during this sampling interval, counted
             using the rules for counting the nlMatrixSDOctets object.  If
             the value of nlMatrixTopNControlRateBase is
             nlMatrixTopNOctets, this variable will be used to sort this
             report.
        */
        readonly attribute Gauge32Type nlMatrixTopNOctetRate;

        /*
             The number of octets seen from the destination host to the
             source host during this sampling interval, counted
             using the rules for counting the nlMatrixDSOctets object.  (Note
             that the corresponding nlMatrixSDOctets object selected is the
             one whose source address is equal to nlMatrixTopNDestAddress
             and whose destination address is equal to
             nlMatrixTopNSourceAddress.)
             
             Note that if the value of nlMatrixTopNControlRateBase is equal
             to nlMatrixTopNOctets, the sort of topN entries is based
             entirely on nlMatrixTopNOctetRate, and not on the value of
             this object.
        */
        readonly attribute Gauge32Type nlMatrixTopNReverseOctetRate;
    };

    interface alHost : SNMPMgmt::SmiEntry {

        /*
             A collection of statistics for a particular protocol from a
             particular network address that has been discovered on an
             interface of this device.
             
             The probe will populate this table for all protocols in the
             protocol directory table whose value of
             protocolDirHostConfig is equal to supportedOn(3), and
             will delete any entries whose protocolDirEntry is deleted or
             has a protocolDirHostConfig value of supportedOff(2).
             
             
             
             The probe will add to this table all addresses
             seen as the source or destination address in all packets with
             no MAC errors and will increment octet and packet counts in
             the table for all packets with no MAC errors.  Further,
             entries will only be added to this table if their address
             exists in the nlHostTable and will be deleted from this table
             if their address is deleted from the nlHostTable.
        */
        SNMPMgmt::SmiTableIterator get_alHostTable();
    };


    /*
             A conceptual row in the alHostTable.
             
             The hlHostControlIndex value in the index identifies the
             hlHostControlEntry on whose behalf this entry was created.
             The first protocolDirLocalIndex value in the index identifies
             the network-layer protocol of the address.
             The nlHostAddress value in the index identifies the network-
             layer address of this entry.
             The second protocolDirLocalIndex value in the index identifies
             the protocol that is counted by this entry.
             
             An example of the indexing in this entry is
             alHostOutPkts.1.783495.18.4.128.2.6.6.34.
             
             Note that some combinations of index values may result in an
             index that exceeds 128 sub-identifiers in length, which exceeds
             the maximum for the SNMP protocol.  Implementations should take
             care to avoid such combinations.
    */
    interface alHostEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "hlHostControlIndex alHostTimeMark protocolDirLocalIndex nlHostAddress protocolDirLocalIndex";

        /*
             The number of packets of this protocol type without errors
             transmitted to this address since it was added to the
             alHostTable.  Note that this is the number of link-layer
             packets, so if a single network-layer packet is fragmented
             into several link-layer frames, this counter is incremented
             several times.
        */
        readonly attribute ZeroBasedCounter32Type alHostInPkts;

        /*
             The number of packets of this protocol type without errors
             transmitted by this address since it was added to the
             alHostTable.  Note that this is the number of link-layer
             packets, so if a single network-layer packet is fragmented
             into several link-layer frames, this counter is incremented
             several times.
        */
        readonly attribute ZeroBasedCounter32Type alHostOutPkts;

        /*
             The number of octets transmitted to this address
             of this protocol type since it was added to the
             alHostTable (excluding framing bits, but including
             FCS octets), excluding octets in packets that
             contained errors.
             
             Note that this doesn't count just those octets in the particular
             protocol frames but includes the entire packet that contained
             the protocol.
        */
        readonly attribute ZeroBasedCounter32Type alHostInOctets;

        /*
             The number of octets transmitted by this address
             of this protocol type since it was added to the
             alHostTable (excluding framing bits, but including
             FCS octets), excluding octets in packets that
             contained errors.
             
             Note that this doesn't count just those octets in the particular
             protocol frames but includes the entire packet that contained
             the protocol.
        */
        readonly attribute ZeroBasedCounter32Type alHostOutOctets;

        /*
             The value of sysUpTime when this entry was last activated.
             This can be used by the management station to ensure that the
             entry has not been deleted and recreated between polls.
        */
        readonly attribute LastCreateTimeType alHostCreateTime;
    };

    interface alMatrix : SNMPMgmt::SmiEntry {

        /*
             A list of application traffic matrix entries that collect
             statistics for conversations of a particular protocol between
             two network-level addresses.  This table is indexed first by
             the source address and then by the destination address to make
             it convenient to collect all statistics from a particular
             address.
             
             The probe will populate this table for all protocols in the
             protocol directory table whose value of
             
             
             
             protocolDirMatrixConfig is equal to supportedOn(3), and
             will delete any entries whose protocolDirEntry is deleted or
             has a protocolDirMatrixConfig value of supportedOff(2).
             
             The probe will add to this table all pairs of addresses for
             all protocols seen in all packets with no MAC errors and will
             increment octet and packet counts in the table for all packets
             with no MAC errors.  Further, entries will only be added to
             this table if their address pair exists in the nlMatrixSDTable
             and will be deleted from this table if the address pair is
             deleted from the nlMatrixSDTable.
        */
        SNMPMgmt::SmiTableIterator get_alMatrixSDTable();

        /*
             A list of application traffic matrix entries that collect
             statistics for conversations of a particular protocol between
             two network-level addresses.  This table is indexed first by
             the destination address and then by the source address to make
             it convenient to collect all statistics to a particular
             address.
             
             The probe will populate this table for all protocols in the
             protocol directory table whose value of
             protocolDirMatrixConfig is equal to supportedOn(3), and
             will delete any entries whose protocolDirEntry is deleted or
             has a protocolDirMatrixConfig value of supportedOff(2).
             
             The probe will add to this table all pairs of addresses for
             all protocols seen in all packets with no MAC errors and will
             increment octet and packet counts in the table for all packets
             with no MAC errors.  Further, entries will only be added to
             this table if their address pair exists in the nlMatrixDSTable
             and will be deleted from this table if the address pair is
             deleted from the nlMatrixDSTable.
        */
        SNMPMgmt::SmiTableIterator get_alMatrixDSTable();

        /*
             A set of parameters that control the creation of a
             report of the top N matrix entries according to
             a selected metric.
        */
        SNMPMgmt::SmiTableIterator get_alMatrixTopNControlTable();

        /*
             A set of statistics for those application-layer matrix
             entries that have counted the highest number of octets or
             packets.
        */
        SNMPMgmt::SmiTableIterator get_alMatrixTopNTable();
    };


    /*
             A conceptual row in the alMatrixSDTable.
             
             The hlMatrixControlIndex value in the index identifies the
             hlMatrixControlEntry on whose behalf this entry was created.
             The first protocolDirLocalIndex value in the index identifies
             the network-layer protocol of the nlMatrixSDSourceAddress and
             nlMatrixSDDestAddress.
             The nlMatrixSDSourceAddress value in the index identifies the
             network-layer address of the source host in this conversation.
             The nlMatrixSDDestAddress value in the index identifies the
             network-layer address of the destination host in this
             conversation.
             The second protocolDirLocalIndex value in the index identifies
             the protocol that is counted by this entry.
             
             An example of the indexing of this entry is
             alMatrixSDPkts.1.783495.18.4.128.2.6.6.4.128.2.6.7.34.
             
             Note that some combinations of index values may result in an
             index that exceeds 128 sub-identifiers in length, which exceeds
             the maximum for the SNMP protocol.  Implementations should take
             care to avoid such combinations.
    */
    interface alMatrixSDEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "hlMatrixControlIndex alMatrixSDTimeMark protocolDirLocalIndex nlMatrixSDSourceAddress nlMatrixSDDestAddress protocolDirLocalIndex";

        /*
             The number of packets of this protocol type without errors
             transmitted from the source address to the destination address
             since this entry was added to the alMatrixSDTable.  Note that
             this is the number of link-layer packets, so if a single
             network-layer packet is fragmented into several link-layer
             frames, this counter is incremented several times.
        */
        readonly attribute ZeroBasedCounter32Type alMatrixSDPkts;

        /*
             The number of octets in packets of this protocol type
             transmitted from the source address to the destination address
             since this entry was added to the alMatrixSDTable (excluding
             framing bits, but including FCS octets), excluding octets
             in packets that contained errors.
             
             Note that this doesn't count just those octets in the particular
             protocol frames but includes the entire packet that contained
             the protocol.
        */
        readonly attribute ZeroBasedCounter32Type alMatrixSDOctets;

        /*
             The value of sysUpTime when this entry was last activated.
             This can be used by the management station to ensure that the
             entry has not been deleted and recreated between polls.
        */
        readonly attribute LastCreateTimeType alMatrixSDCreateTime;
    };


    /*
             A conceptual row in the alMatrixDSTable.
             
             The hlMatrixControlIndex value in the index identifies the
             hlMatrixControlEntry on whose behalf this entry was created.
             The first protocolDirLocalIndex value in the index identifies
             the network-layer protocol of the alMatrixDSSourceAddress and
             alMatrixDSDestAddress.
             The nlMatrixDSDestAddress value in the index identifies the
             network-layer address of the destination host in this
             
             
             
             conversation.
             The nlMatrixDSSourceAddress value in the index identifies the
             network-layer address of the source host in this conversation.
             The second protocolDirLocalIndex value in the index identifies
             the protocol that is counted by this entry.
             
             An example of the indexing of this entry is
             alMatrixDSPkts.1.783495.18.4.128.2.6.7.4.128.2.6.6.34.
             
             Note that some combinations of index values may result in an
             index that exceeds 128 sub-identifiers in length, which exceeds
             the maximum for the SNMP protocol.  Implementations should take
             care to avoid such combinations.
    */
    interface alMatrixDSEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "hlMatrixControlIndex alMatrixDSTimeMark protocolDirLocalIndex nlMatrixDSDestAddress nlMatrixDSSourceAddress protocolDirLocalIndex";

        /*
             The number of packets of this protocol type without errors
             transmitted from the source address to the destination address
             since this entry was added to the alMatrixDSTable.  Note that
             this is the number of link-layer packets, so if a single
             network-layer packet is fragmented into several link-layer
             frames, this counter is incremented several times.
        */
        readonly attribute ZeroBasedCounter32Type alMatrixDSPkts;

        /*
             The number of octets in packets of this protocol type
             transmitted from the source address to the destination address
             since this entry was added to the alMatrixDSTable (excluding
             framing bits, but including FCS octets), excluding octets
             in packets that contained errors.
             
             Note that this doesn't count just those octets in the particular
             protocol frames but includes the entire packet that contained
             the protocol.
        */
        readonly attribute ZeroBasedCounter32Type alMatrixDSOctets;

        /*
             The value of sysUpTime when this entry was last activated.
             This can be used by the management station to ensure that the
             entry has not been deleted and recreated between polls.
        */
        readonly attribute LastCreateTimeType alMatrixDSCreateTime;
    };


    /*
             A conceptual row in the alMatrixTopNControlTable.
             
             An example of the indexing of this table is
             alMatrixTopNControlDuration.3
    */
    interface alMatrixTopNControlEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "alMatrixTopNControlIndex";

        /*
             The alMatrix[SD/DS] table for which a topN report will be
             prepared on behalf of this entry.  The alMatrix[SD/DS] table
             is identified by the value of the hlMatrixControlIndex
             for that table - that value is used here to identify the
             particular table.
             
             This object may not be modified if the associated
             alMatrixTopNControlStatus object is equal to active(1).
        */
        attribute AlMatrixTopNControlMatrixIndexType alMatrixTopNControlMatrixIndex;

        /*
             This object controls which alMatrix[SD/DS] entry that the
             alMatrixTopNEntries are sorted by, which view of the matrix
             table that will be used, as well as which table the results
             will be reported in.
             
             The values alMatrixTopNTerminalsPkts,
             alMatrixTopNTerminalsOctets,
             alMatrixTopNTerminalsHighCapacityPkts, and
             alMatrixTopNTerminalsHighCapacityOctets cause collection
             only from protocols that have no child protocols that are
             counted.  The values alMatrixTopNAllPkts,
             alMatrixTopNAllOctets, alMatrixTopNAllHighCapacityPkts, and
             alMatrixTopNAllHighCapacityOctets cause collection from all
             alMatrix entries.
             
             This object may not be modified if the associated
             alMatrixTopNControlStatus object is equal to active(1).
        */
        attribute AlMatrixTopNControlRateBaseType alMatrixTopNControlRateBase;

        /*
             The number of seconds left in the report currently
             being collected.  When this object is modified by
             the management station, a new collection is started,
             possibly aborting a currently running report.  The
             new value is used as the requested duration of this
             report and is immediately loaded into the associated
             alMatrixTopNControlDuration object.
             
             When the report finishes, the probe will automatically
             start another collection with the same initial value
             of alMatrixTopNControlTimeRemaining.  Thus, the management
             station may simply read the resulting reports repeatedly,
             checking the startTime and duration each time to ensure that a
             report was not missed or that the report parameters were not
             changed.
             
             While the value of this object is non-zero, it decrements
             by one per second until it reaches zero.  At the time
             
             
             
             that this object decrements to zero, the report is made
             accessible in the alMatrixTopNTable, overwriting any report
             that may be there.
             
             When this object is modified by the management station, any
             associated entries in the alMatrixTopNTable shall be deleted.
             
             (Note that this is a different algorithm than the one used
             in the hostTopNTable).
        */
        attribute AlMatrixTopNControlTimeRemainingType alMatrixTopNControlTimeRemaining;

        /*
             The number of reports that have been generated by this entry.
        */
        readonly attribute Counter32Type alMatrixTopNControlGeneratedReports;

        /*
             The number of seconds that this report has collected
             during the last sampling interval.
             
             When the associated alMatrixTopNControlTimeRemaining object
             is set, this object shall be set by the probe to the
             same value and shall not be modified until the next
             time the alMatrixTopNControlTimeRemaining is set.
             
             This value shall be zero if no reports have been
             requested for this alMatrixTopNControlEntry.
        */
        readonly attribute ASN1_Integer alMatrixTopNControlDuration;

        /*
             The maximum number of matrix entries requested for this report.
             
             When this object is created or modified, the probe
             should set alMatrixTopNControlGrantedSize as closely to this
             object as possible for the particular probe
             implementation and available resources.
        */
        attribute AlMatrixTopNControlRequestedSizeType alMatrixTopNControlRequestedSize;

        /*
             The maximum number of matrix entries in this report.
             
             When the associated alMatrixTopNControlRequestedSize object
             is created or modified, the probe should set this
             object as closely to the requested value as
             possible for the particular implementation and
             available resources. The probe must not lower this
             value except as a side-effect of a set to the associated
             alMatrixTopNControlRequestedSize object.
             
             If the value of alMatrixTopNControlRateBase is equal to
             alMatrixTopNTerminalsPkts or alMatrixTopNAllPkts, when the
             next topN report is generated, matrix entries with the highest
             value of alMatrixTopNPktRate shall be placed in this table in
             decreasing order of this rate until there is no more room or
             until there are no more matrix entries.
             
             If the value of alMatrixTopNControlRateBase is equal to
             alMatrixTopNTerminalsOctets or alMatrixTopNAllOctets, when the
             next topN report is generated, matrix entries with the highest
             value of alMatrixTopNOctetRate shall be placed in this table
             in decreasing order of this rate until there is no more room
             or until there are no more matrix entries.
             
             It is an implementation-specific matter how entries with the
             same value of alMatrixTopNPktRate or alMatrixTopNOctetRate are
             sorted.  It is also an implementation-specific matter as to
             whether zero-valued entries are available.
        */
        readonly attribute AlMatrixTopNControlGrantedSizeType alMatrixTopNControlGrantedSize;

        /*
             The value of sysUpTime when this topN report was
             last started.  In other words, this is the time that
             the associated alMatrixTopNControlTimeRemaining object
             was modified to start the requested report or the time
             the report was last automatically (re)started.
             
             
             
             This object may be used by the management station to
             determine whether a report was missed.
        */
        readonly attribute TimeStampType alMatrixTopNControlStartTime;

        /*
             The entity that configured this entry and is
             therefore using the resources assigned to it.
        */
        attribute OwnerStringType alMatrixTopNControlOwner;

        /*
             The status of this alMatrixTopNControlEntry.
             
             An entry may not exist in the active state unless all
             objects in the entry have an appropriate value.
             
             If this object is not equal to active(1), all
             associated entries in the alMatrixTopNTable shall be
             deleted by the agent.
        */
        attribute RowStatusType alMatrixTopNControlStatus;
    };


    /*
             A conceptual row in the alMatrixTopNTable.
             
             The alMatrixTopNControlIndex value in the index identifies
             the alMatrixTopNControlEntry on whose behalf this entry was
             created.
             
             
             
             An example of the indexing of this table is
             alMatrixTopNPktRate.3.10
    */
    interface alMatrixTopNEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "alMatrixTopNControlIndex alMatrixTopNIndex";

        /*
             The protocolDirLocalIndex of the network-layer protocol of
             this entry's network address.
        */
        readonly attribute AlMatrixTopNProtocolDirLocalIndexType alMatrixTopNProtocolDirLocalIndex;

        /*
             The network-layer address of the source host in this
             conversation.
             
             This is represented as an octet string with
             specific semantics and length as identified
             by the associated alMatrixTopNProtocolDirLocalIndex.
             
             For example, if the alMatrixTopNProtocolDirLocalIndex
             indicates an encapsulation of IP, this object is encoded as a
             length octet of 4, followed by the 4 octets of the IP address,
             in network byte order.
        */
        readonly attribute AlMatrixTopNSourceAddressType alMatrixTopNSourceAddress;

        /*
             The network-layer address of the destination host in this
             conversation.
             
             This is represented as an octet string with
             specific semantics and length as identified
             by the associated alMatrixTopNProtocolDirLocalIndex.
             
             For example, if the alMatrixTopNProtocolDirLocalIndex
             indicates an encapsulation of IP, this object is encoded as a
             length octet of 4, followed by the 4 octets of the IP address,
             in network byte order.
        */
        readonly attribute AlMatrixTopNDestAddressType alMatrixTopNDestAddress;

        /*
             The type of the protocol counted by this matrix entry.
        */
        readonly attribute AlMatrixTopNAppProtocolDirLocalIndexType alMatrixTopNAppProtocolDirLocalIndex;

        /*
             The number of packets seen of this protocol from the source
             host to the destination host during this sampling interval,
             counted using the rules for counting the alMatrixSDPkts
             object.
             
             If the value of alMatrixTopNControlRateBase is
             alMatrixTopNTerminalsPkts or alMatrixTopNAllPkts, this
             variable will be used to sort this report.
        */
        readonly attribute Gauge32Type alMatrixTopNPktRate;

        /*
             The number of packets seen of this protocol from the
             destination host to the source host during this sampling
             interval, counted using the rules for counting the
             alMatrixDSPkts object.  (Note that the corresponding
             alMatrixSDPkts object selected is the one whose source address
             is equal to alMatrixTopNDestAddress and whose destination
             address is equal to alMatrixTopNSourceAddress.)
             
             Note that if the value of alMatrixTopNControlRateBase is equal
             to alMatrixTopNTerminalsPkts or alMatrixTopNAllPkts, the sort
             of topN entries is based entirely on alMatrixTopNPktRate, and
             not on the value of this object.
        */
        readonly attribute Gauge32Type alMatrixTopNReversePktRate;

        /*
             The number of octets seen of this protocol from the source
             host to the destination host during this sampling interval,
             counted using the rules for counting the alMatrixSDOctets
             object.
             
             If the value of alMatrixTopNControlRateBase is
             alMatrixTopNTerminalsOctets or alMatrixTopNAllOctets, this
             variable will be used to sort this report.
        */
        readonly attribute Gauge32Type alMatrixTopNOctetRate;

        /*
             The number of octets seen of this protocol from the
             destination host to the source host during this sampling
             interval, counted using the rules for counting the
             alMatrixDSOctets object.  (Note that the corresponding
             alMatrixSDOctets object selected is the one whose source
             address is equal to alMatrixTopNDestAddress and whose
             destination address is equal to alMatrixTopNSourceAddress.)
             
             Note that if the value of alMatrixTopNControlRateBase is equal
             to alMatrixTopNTerminalsOctets or alMatrixTopNAllOctets, the
             sort of topN entries is based entirely on
             alMatrixTopNOctetRate, and not on the value of this object.
        */
        readonly attribute Gauge32Type alMatrixTopNReverseOctetRate;
    };

    interface usrHistory : SNMPMgmt::SmiEntry {

        /*
             A list of data-collection configuration entries.
        */
        SNMPMgmt::SmiTableIterator get_usrHistoryControlTable();

        /*
             A list of data-collection configuration entries.
        */
        SNMPMgmt::SmiTableIterator get_usrHistoryObjectTable();

        /*
             A list of user-defined history entries.
        */
        SNMPMgmt::SmiTableIterator get_usrHistoryTable();
    };


    /*
             A list of parameters that set up a group of user-defined
             MIB objects to be sampled periodically (called a
             bucket-group).
             
             For example, an instance of usrHistoryControlInterval
             might be named usrHistoryControlInterval.1
    */
    interface usrHistoryControlEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "usrHistoryControlIndex";

        /*
             The number of MIB objects to be collected
             in the portion of usrHistoryTable associated with this
             usrHistoryControlEntry.
             
             This object may not be modified if the associated instance
             of usrHistoryControlStatus is equal to active(1).
        */
        attribute UsrHistoryControlObjectsType usrHistoryControlObjects;

        /*
             The requested number of discrete time intervals
             over which data is to be saved in the part of the
             usrHistoryTable associated with this usrHistoryControlEntry.
             
             When this object is created or modified, the probe
             should set usrHistoryControlBucketsGranted as closely to
             this object as possible for the particular probe
             implementation and available resources.
        */
        attribute UsrHistoryControlBucketsRequestedType usrHistoryControlBucketsRequested;

        /*
             The number of discrete sampling intervals
             over which data shall be saved in the part of
             the usrHistoryTable associated with this
             usrHistoryControlEntry.
             
             When the associated usrHistoryControlBucketsRequested
             object is created or modified, the probe should set
             this object as closely to the requested value as
             possible for the particular probe implementation and
             available resources.  The probe must not lower this
             value except as a result of a modification to the associated
             usrHistoryControlBucketsRequested object.
             
             The associated usrHistoryControlBucketsRequested object
             should be set before or at the same time as this object
             to allow the probe to accurately estimate the resources
             required for this usrHistoryControlEntry.
             
             There will be times when the actual number of buckets
             associated with this entry is less than the value of
             this object.  In this case, at the end of each sampling
             interval, a new bucket will be added to the usrHistoryTable.
             
             When the number of buckets reaches the value of this object
             and a new bucket is to be added to the usrHistoryTable,
             the oldest bucket associated with this usrHistoryControlEntry
             shall be deleted by the agent so that the new bucket can be
             added.
             
             When the value of this object changes to a value less than
             the current value, entries are deleted from the
             usrHistoryTable associated with this usrHistoryControlEntry.
             Enough of the oldest of these entries shall be deleted by the
             agent so that their number remains less than or equal to the
             new value of this object.
             
             When the value of this object changes to a value greater
             than the current value, the number of associated usrHistory
             entries may be allowed to grow.
        */
        readonly attribute UsrHistoryControlBucketsGrantedType usrHistoryControlBucketsGranted;

        /*
             The interval in seconds over which the data is
             sampled for each bucket in the part of the usrHistory
             table associated with this usrHistoryControlEntry.
             
             Because the counters in a bucket may overflow at their
             maximum value with no indication, a prudent manager will
             take into account the possibility of overflow in any of
             the associated counters.  It is important to consider the
             minimum time in which any counter could overflow on a
             particular media type and to set the usrHistoryControlInterval
             object to a value less than this interval.
             
             This object may not be modified if the associated
             usrHistoryControlStatus object is equal to active(1).
        */
        attribute UsrHistoryControlIntervalType usrHistoryControlInterval;

        /*
             The entity that configured this entry and is
             therefore using the resources assigned to it.
        */
        attribute OwnerStringType usrHistoryControlOwner;

        /*
             The status of this variable history control entry.
             
             An entry may not exist in the active state unless all
             objects in the entry have an appropriate value.
             
             If this object is not equal to active(1), all associated
             entries in the usrHistoryTable shall be deleted.
        */
        attribute RowStatusType usrHistoryControlStatus;
    };


    /*
             A list of MIB instances to be sampled periodically.
             
             Entries in this table are created when an associated
             usrHistoryControlObjects object is created.
             
             The usrHistoryControlIndex value in the index is
             that of the associated usrHistoryControlEntry.
             
             For example, an instance of usrHistoryObjectVariable might be
             usrHistoryObjectVariable.1.3
    */
    interface usrHistoryObjectEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "usrHistoryControlIndex usrHistoryObjectIndex";

        /*
             The object identifier of the particular variable to be
             
             
             
             sampled.
             
             Only variables that resolve to an ASN.1 primitive type of
             Integer32 (Integer32, Counter, Gauge, or TimeTicks) may be
             sampled.
             
             Because SNMP access control is articulated entirely in terms
             of the contents of MIB views, no access control mechanism
             exists that can restrict the value of this object to identify
             only those objects that exist in a particular MIB view.
             Because there is thus no acceptable means of restricting the
             read access that could be obtained through the user history
             mechanism, the probe must only grant write access to this
             object in those views that have read access to all objects on
             the probe.  See USM [RFC3414] and VACM [RFC3415] for more
             information.
             
             During a set operation, if the supplied variable name is not
             available in the selected MIB view, a badValue error must be
             returned.
             
             This object may not be modified if the associated
             usrHistoryControlStatus object is equal to active(1).
        */
        attribute ASN1_ObjectIdentifier usrHistoryObjectVariable;

        /*
             The method of sampling the selected variable for storage in
             the usrHistoryTable.
             
             If the value of this object is absoluteValue(1), the value of
             the selected variable will be copied directly into the history
             bucket.
             
             If the value of this object is deltaValue(2), the value of the
             selected variable at the last sample will be subtracted from
             the current value, and the difference will be stored in the
             history bucket.  If the associated usrHistoryObjectVariable
             instance could not be obtained at the previous sample
             interval, then a delta sample is not possible, and the value
             of the associated usrHistoryValStatus object for this interval
             will be valueNotAvailable(1).
             
             
             
             This object may not be modified if the associated
             usrHistoryControlStatus object is equal to active(1).
        */
        attribute UsrHistoryObjectSampleTypeType usrHistoryObjectSampleType;
    };


    /*
             A historical sample of user-defined variables.  This sample
             is associated with the usrHistoryControlEntry that set up the
             parameters for a regular collection of these samples.
             
             The usrHistoryControlIndex value in the index identifies the
             usrHistoryControlEntry on whose behalf this entry was created.
             The usrHistoryObjectIndex value in the index identifies the
             usrHistoryObjectEntry on whose behalf this entry was created.
             
             For example, an instance of usrHistoryAbsValue, which represents
             the 14th sample of a variable collected as specified by
             usrHistoryControlEntry.1 and usrHistoryObjectEntry.1.5,
             would be named usrHistoryAbsValue.1.14.5
    */
    interface usrHistoryEntry : SNMPMgmt::SmiEntry {

        const string IndexVarList = "usrHistoryControlIndex usrHistorySampleIndex usrHistoryObjectIndex";

        /*
             The value of sysUpTime at the start of the interval over
             which this sample was measured.  If the probe keeps track of
             the time of day, it should start the first sample of the
             history at a time such that when the next hour of the day
             begins, a sample is started at that instant.
             
             Note that following this rule may require that the probe delay
             collecting the first sample of the history, as each sample
             must be of the same interval.  Also note that the sample that
             is currently being collected is not accessible in this table
             until the end of its interval.
        */
        readonly attribute TimeStampType usrHistoryIntervalStart;

        /*
             The value of sysUpTime at the end of the interval over which
             this sample was measured.
        */
        readonly attribute TimeStampType usrHistoryIntervalEnd;

        /*
             The absolute value (i.e., unsigned value) of the
             user-specified statistic during the last sampling period.  The
             value during the current sampling period is not made available
             until the period is completed.
             
             To obtain the true value for this sampling interval, the
             associated instance of usrHistoryValStatus must be checked,
             and usrHistoryAbsValue adjusted as necessary.
             
             
             
             
             If the MIB instance could not be accessed during the sampling
             interval, then this object will have a value of zero, and the
             associated instance of usrHistoryValStatus will be set to
             'valueNotAvailable(1)'.
             
             The access control check prescribed in the definition of
             usrHistoryObjectVariable SHOULD be checked for each sampling
             interval.  If this check determines that access should not be
             allowed, then this object will have a value of zero, and the
             associated instance of usrHistoryValStatus will be set to
             'valueNotAvailable(1)'.
        */
        readonly attribute Gauge32Type usrHistoryAbsValue;

        /*
             This object indicates the validity and sign of the data in
             the associated instance of usrHistoryAbsValue.
             
             If the MIB instance could not be accessed during the sampling
             interval, then 'valueNotAvailable(1)' will be returned.
             
             If the sample is valid and the actual value of the sample is
             greater than or equal to zero, then 'valuePositive(2)' is
             returned.
             
             If the sample is valid and the actual value of the sample is
             less than zero, 'valueNegative(3)' will be returned.  The
             associated instance of usrHistoryAbsValue should be multiplied
             by -1 to obtain the true sample value.
        */
        readonly attribute UsrHistoryValStatusType usrHistoryValStatus;
    };

    interface probeConfig : SNMPMgmt::SmiEntry {

        /*
             An indication of the RMON MIB groups supported
             on at least one interface by this probe.
        */
        readonly attribute ProbeCapabilitiesType probeCapabilities;

        /*
             The software revision of this device.  This string will have
             a zero length if the revision is unknown.
        */
        readonly attribute ProbeSoftwareRevType probeSoftwareRev;

        /*
             The hardware revision of this device.  This string will have
             a zero length if the revision is unknown.
        */
        readonly attribute ProbeHardwareRevType probeHardwareRev;

        /*
             Probe's current date and time.
             
             field  octets  contents                  range
             -----  ------  --------                  -----
               1      1-2   year                      0..65536
               2       3    month                     1..12
               3       4    day                       1..31
               4       5    hour                      0..23
               5       6    minutes                   0..59
               6       7    seconds                   0..60
                             (use 60 for leap-second)
               7       8    deci-seconds              0..9
               8       9    direction from UTC        '+' / '-'
               9      10    hours from UTC            0..11
              10      11    minutes from UTC          0..59
             
             For example, Tuesday May 26, 1992 at 1:30:15 PM
             EDT would be displayed as:
             
                         1992-5-26,13:30:15.0,-4:0
             
             Note that if only local time is known, then
             time zone information (fields 8-10) is not
             present, and that if no time information is known, the
             null string is returned.
        */
        attribute ProbeDateTimeType probeDateTime;

        /*
             Setting this object to warmBoot(2) causes the device to
             restart the application software with current configuration
             parameters saved in non-volatile memory.  Setting this
             object to coldBoot(3) causes the device to reinitialize
             configuration parameters in non-volatile memory to default
             values and to restart the application software.  When the device
             is running normally, this variable has a value of
             running(1).
        */
        attribute ProbeResetControlType probeResetControl;
    };

    interface SmiEntryFactory : SNMPMgmt::GenericFactory {

        filter2Entry create_filter2Entry (
            in FilterProtocolDirDataLocalIndexType filterProtocolDirDataLocalIndex,
            in FilterProtocolDirLocalIndexType filterProtocolDirLocalIndex
        ) raises (
            SNMPMgmt::AlreadyExists,
            CosLifeCycle::InvalidCriteria,
            CosLifeCycle::CannotMeetCriteria
        );

        protocolDirEntry create_protocolDirEntry (
            in ProtocolDirIDType protocolDirID,
            in ProtocolDirParametersType protocolDirParameters,
            in ProtocolDirDescrType protocolDirDescr,
            in ProtocolDirAddressMapConfigType protocolDirAddressMapConfig,
            in ProtocolDirHostConfigType protocolDirHostConfig,
            in ProtocolDirMatrixConfigType protocolDirMatrixConfig,
            in OwnerStringType protocolDirOwner,
            in RowStatusType protocolDirStatus
        ) raises (
            SNMPMgmt::AlreadyExists,
            CosLifeCycle::InvalidCriteria,
            CosLifeCycle::CannotMeetCriteria
        );

        protocolDistControlEntry create_protocolDistControlEntry (
            in ProtocolDistControlIndexType protocolDistControlIndex,
            in DataSourceType protocolDistControlDataSource,
            in OwnerStringType protocolDistControlOwner,
            in RowStatusType protocolDistControlStatus
        ) raises (
            SNMPMgmt::AlreadyExists,
            CosLifeCycle::InvalidCriteria,
            CosLifeCycle::CannotMeetCriteria
        );

        addressMap create_addressMap (
            in AddressMapMaxDesiredEntriesType addressMapMaxDesiredEntries
        ) raises (
            SNMPMgmt::AlreadyExists,
            CosLifeCycle::InvalidCriteria,
            CosLifeCycle::CannotMeetCriteria
        );

        addressMapControlEntry create_addressMapControlEntry (
            in AddressMapControlIndexType addressMapControlIndex,
            in DataSourceType addressMapControlDataSource,
            in OwnerStringType addressMapControlOwner,
            in RowStatusType addressMapControlStatus
        ) raises (
            SNMPMgmt::AlreadyExists,
            CosLifeCycle::InvalidCriteria,
            CosLifeCycle::CannotMeetCriteria
        );

        hlHostControlEntry create_hlHostControlEntry (
            in HlHostControlIndexType hlHostControlIndex,
            in DataSourceType hlHostControlDataSource,
            in HlHostControlNlMaxDesiredEntriesType hlHostControlNlMaxDesiredEntries,
            in HlHostControlAlMaxDesiredEntriesType hlHostControlAlMaxDesiredEntries,
            in OwnerStringType hlHostControlOwner,
            in RowStatusType hlHostControlStatus
        ) raises (
            SNMPMgmt::AlreadyExists,
            CosLifeCycle::InvalidCriteria,
            CosLifeCycle::CannotMeetCriteria
        );

        hlMatrixControlEntry create_hlMatrixControlEntry (
            in HlMatrixControlIndexType hlMatrixControlIndex,
            in DataSourceType hlMatrixControlDataSource,
            in HlMatrixControlNlMaxDesiredEntriesType hlMatrixControlNlMaxDesiredEntries,
            in HlMatrixControlAlMaxDesiredEntriesType hlMatrixControlAlMaxDesiredEntries,
            in OwnerStringType hlMatrixControlOwner,
            in RowStatusType hlMatrixControlStatus
        ) raises (
            SNMPMgmt::AlreadyExists,
            CosLifeCycle::InvalidCriteria,
            CosLifeCycle::CannotMeetCriteria
        );

        nlMatrixTopNControlEntry create_nlMatrixTopNControlEntry (
            in NlMatrixTopNControlIndexType nlMatrixTopNControlIndex,
            in NlMatrixTopNControlMatrixIndexType nlMatrixTopNControlMatrixIndex,
            in NlMatrixTopNControlRateBaseType nlMatrixTopNControlRateBase,
            in NlMatrixTopNControlTimeRemainingType nlMatrixTopNControlTimeRemaining,
            in NlMatrixTopNControlRequestedSizeType nlMatrixTopNControlRequestedSize,
            in OwnerStringType nlMatrixTopNControlOwner,
            in RowStatusType nlMatrixTopNControlStatus
        ) raises (
            SNMPMgmt::AlreadyExists,
            CosLifeCycle::InvalidCriteria,
            CosLifeCycle::CannotMeetCriteria
        );

        alMatrixTopNControlEntry create_alMatrixTopNControlEntry (
            in AlMatrixTopNControlIndexType alMatrixTopNControlIndex,
            in AlMatrixTopNControlMatrixIndexType alMatrixTopNControlMatrixIndex,
            in AlMatrixTopNControlRateBaseType alMatrixTopNControlRateBase,
            in AlMatrixTopNControlTimeRemainingType alMatrixTopNControlTimeRemaining,
            in AlMatrixTopNControlRequestedSizeType alMatrixTopNControlRequestedSize,
            in OwnerStringType alMatrixTopNControlOwner,
            in RowStatusType alMatrixTopNControlStatus
        ) raises (
            SNMPMgmt::AlreadyExists,
            CosLifeCycle::InvalidCriteria,
            CosLifeCycle::CannotMeetCriteria
        );

        usrHistoryControlEntry create_usrHistoryControlEntry (
            in UsrHistoryControlIndexType usrHistoryControlIndex,
            in UsrHistoryControlObjectsType usrHistoryControlObjects,
            in UsrHistoryControlBucketsRequestedType usrHistoryControlBucketsRequested,
            in UsrHistoryControlIntervalType usrHistoryControlInterval,
            in OwnerStringType usrHistoryControlOwner,
            in RowStatusType usrHistoryControlStatus
        ) raises (
            SNMPMgmt::AlreadyExists,
            CosLifeCycle::InvalidCriteria,
            CosLifeCycle::CannotMeetCriteria
        );

        usrHistoryObjectEntry create_usrHistoryObjectEntry (
            in UsrHistoryControlIndexType usrHistoryControlIndex,
            in UsrHistoryObjectIndexType usrHistoryObjectIndex,
            in ASN1_ObjectIdentifier usrHistoryObjectVariable,
            in UsrHistoryObjectSampleTypeType usrHistoryObjectSampleType
        ) raises (
            SNMPMgmt::AlreadyExists,
            CosLifeCycle::InvalidCriteria,
            CosLifeCycle::CannotMeetCriteria
        );

        probeConfig create_probeConfig (
            in ProbeDateTimeType probeDateTime,
            in ProbeResetControlType probeResetControl
        ) raises (
            SNMPMgmt::AlreadyExists,
            CosLifeCycle::InvalidCriteria,
            CosLifeCycle::CannotMeetCriteria
        );
    };

    /* pseudo */
    interface DefaultValues {
        /* DEFVAL:  0 */
        FilterProtocolDirDataLocalIndexType filterProtocolDirDataLocalIndex();

        /* DEFVAL:  0 */
        FilterProtocolDirLocalIndexType filterProtocolDirLocalIndex();

        /* DEFVAL:  1800 */
        NlMatrixTopNControlTimeRemainingType nlMatrixTopNControlTimeRemaining();

        /* DEFVAL:  150 */
        NlMatrixTopNControlRequestedSizeType nlMatrixTopNControlRequestedSize();

        /* DEFVAL:  1800 */
        AlMatrixTopNControlTimeRemainingType alMatrixTopNControlTimeRemaining();

        /* DEFVAL:  150 */
        AlMatrixTopNControlRequestedSizeType alMatrixTopNControlRequestedSize();

        /* DEFVAL:  50 */
        UsrHistoryControlBucketsRequestedType usrHistoryControlBucketsRequested();

        /* DEFVAL:  1800 */
        UsrHistoryControlIntervalType usrHistoryControlInterval();

        /* DEFVAL:  direct */
        SerialModeType serialMode();

        /* DEFVAL:  slip */
        SerialProtocolType serialProtocol();

        /* DEFVAL:  300 */
        SerialTimeoutType serialTimeout();

        /* DEFVAL:  20 */
        SerialDialoutTimeoutType serialDialoutTimeout();

        /* DEFVAL:  direct */
        SerialConnectTypeType serialConnectType();

    };

};

#endif /* !_RMON2_MIB_IDL_ */
